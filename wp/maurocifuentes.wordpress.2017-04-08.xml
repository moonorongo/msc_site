<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2017-04-08 14:01"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Mauro Cifuentes</title>
<link>https://mscifu.wordpress.com</link>
<description>Web developer</description>
<pubDate>Sat, 08 Apr 2017 14:01:02 +0000</pubDate>
<language>es-ES</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://mscifu.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>mscifu</wp:author_login>
  <wp:author_email>mscifu@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[mscifu]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>2692920</wp:term_id>
  <wp:category_nicename>trabajos-propios</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Trabajos propios]]></wp:cat_name>
  <wp:category_description><![CDATA[Cosas que fui haciendo a traves de los años]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>6203</wp:term_id>
  <wp:category_nicename>tutoriales</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Tutoriales]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>429095592</wp:term_id>
  <wp:category_nicename>c64-assembler</wp:category_nicename>
  <wp:category_parent>tutoriales</wp:category_parent>
  <wp:cat_name><![CDATA[C64 assembler]]></wp:cat_name>
  <wp:category_description><![CDATA[Tutorial de programacion en assembler para c64, utilizando herramientas modernas de desarrollo en pc]]></wp:category_description>
</wp:category>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>Mauro Cifuentes</title>
		<link>https://mscifu.wordpress.com</link>
	</image>
	<item>
  <title>Acerca de mi</title>
  <link>https://mscifu.wordpress.com/about/</link>
  <pubDate>Mon, 17 Dec 2007 12:22:29 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[Un poco:
<ul>
	<li>de programador</li>
	<li>de diseñador</li>
	<li>de musico</li>
	<li>de ciclista</li>
	<li>de hombre orquesta</li>
	<li>de electrónico</li>
	<li>de serigrafista</li>
</ul>
que mas queres?? bueno esta bien, lo aprendo...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2007-12-17 12:22:29</wp:post_date>
  <wp:post_date_gmt>2007-12-17 12:22:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Curriculum Vitae</title>
  <link>https://mscifu.wordpress.com/curriculum-vitae/</link>
  <pubDate>Mon, 17 Dec 2007 16:39:09 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.wordpress.com/curriculum-vitae/</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Mauro Cifuentes</h1>
<table border="0" cellspacing="0" cellpadding="10" width="100%">
<tbody>
<tr>
<td width="25%" align="right" valign="top">
<h3>Datos personales:</h3>
</td>
<td width="2%" valign="top"></td>
<td width="73%" valign="top"><strong>Fecha de Nacimiento:</strong> 18 de Julio de  1974
<strong>Dirección:</strong> Berutti 590
<strong>Teléfono:</strong> 0291 154-470159
<strong>DNI:</strong> 23.941.357
<strong>Nacionalidad:</strong> Argentino</td>
</tr>
<tr>
<td align="right" valign="top">
<h3>Estudios:</h3>
</td>
<td valign="top"></td>
<td valign="top">Egresado de la Escuela Nacional de Educación Técnica nº1, con el título de  Técnico en Computación con Orientación Administrativa.</td>
</tr>
<tr>
<td align="right" valign="top">
<h3>Experiencia laboral:</h3>
</td>
<td valign="top"></td>
<td valign="top"><strong>2000 - 2007</strong>: Diseño gráfico, web, programación,  edición de audio y video, realización de comerciales para Proyeccion  Comunicaciones de Marketing, agencia de publicidad, en la que trabajo  actualmente.</td>
</tr>
<tr>
<td align="right" valign="top">
<h3>Información adicional:</h3>
</td>
<td valign="top"></td>
<td valign="top"><strong>Idiomas:</strong> Inglés Técnico (Intermedio)

<strong>Dominio  de los siguientes programas:</strong>
<ul>
	<li>Macromedia Flash</li>
	<li>Adobe Photoshop</li>
	<li>Sony Vegas</li>
	<li>Macromedia Dreamweaver</li>
	<li>Sony SoundForge</li>
	<li>CorelDraw</li>
	<li>3D Studio Max 7</li>
	<li>Microsoft Word - Access - Excel - PowerPoint</li>
</ul>
<strong>Dominio de los siguientes lenguajes de programación:</strong>
<ul>
	<li>C (intermedio)</li>
	<li>Pascal (experto)</li>
	<li>ActionScript (avanzado)</li>
	<li>Javascript (avanzado)</li>
	<li>PHP5 (avanzado)</li>
	<li>ASP (intermedio)</li>
</ul>
<strong>Otros:</strong>
<ul>
	<li>XHTML (experto)</li>
	<li>CSS (experto)</li>
	<li>XML (avanzado)</li>
	<li>MySQL (intermedio)</li>
</ul>
</td>
</tr>
<tr>
<td><strong>Algunos trabajos realizados:</strong></td>
<td>&nbsp;</td>
<td><a href="http://fundacion.manuginobili.com/" target="_blank">Fundacion Manu Ginobili</a><br />
<a href="http://www.huentek.com.ar" target="_blank">Huentek Encuentro Tecnologico</a><br />
<a href="http://www.elprimeroyelultimo.com.ar" target="_blank">El primero y el el ultimo de la semana</a><br />
<a href="http://www.aisametalurgica.com.ar" target="_blank">Aisa Metalurgica</a><br />
</td></tr>
</tbody></table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>2007-12-17 16:39:09</wp:post_date>
  <wp:post_date_gmt>2007-12-17 16:39:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>curriculum-vitae</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>mooC - pequeño CMS</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mooc-pequeno-cms__trashed/</link>
  <pubDate>Mon, 17 Dec 2007 16:48:17 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.wordpress.com/2007/12/17/mooc-pequeno-cms/</guid>
  <description/>
  <content:encoded><![CDATA[Comencé a desarrollar este pequeño editor de contenidos (blog? CMS?... WTF??)  con el objetivo de tener un CMS con la cantidad mínima y necesaria de opciones, y que además sea lo mas veloz posible.

Estabamos usando el fantastico Wordpress (alabado sea su nombre, jeje)  pero necesitabamos algo sencillo, yo a la vez necesitaba aprender un poco mas de metodologia de php, base de datos, algo de CSS y alguna otra yerba mas... y para lo que queriamos el WP resultaba tener demasiadas opciones que jamás se utilizarian... de momento se encuentra funcional la parte "que vería el usuario", ya que lo necesitabamos tener online lo mas urgente posible.

Ahora estoy desarrollando la parte del "editor" propiamente. No tendra demasiadas pretensiones, solamente titulo, texto de la noticia, categorias, posibilidad de proteger la noticia (con una unica contraseña), y un diseño sencillo, pero que se vea igual en todos los navegadores (desde el IE 5.5, opera, safari, hasta FFox)

si quieren verlo en accion: <a href="http://www.elprimeroyelultimo.com.ar">http://www.elprimeroyelultimo.com.ar</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2007-12-17 16:48:17</wp:post_date>
  <wp:post_date_gmt>2007-12-17 16:48:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mooc-pequeno-cms__trashed</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[publish]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1491053007]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_desired_post_slug</wp:meta_key>
    <wp:meta_value><![CDATA[mooc-pequeno-cms]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Mi mayor obra de arte...</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/</link>
  <pubDate>Mon, 17 Dec 2007 16:52:14 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/</guid>
  <description/>
  <content:encoded><![CDATA[Bueno, a futuro (no lo encuentro en este momento) colgaré por aqui lo que considero es lo mejor que he hecho en mi vida... <strong>¡DoublePakman!</strong>

Un juego programado en TurboPascal 7.0 (para msdos...snif) de un pacman, de toda la vida, con la salvedad de poder jugar de a dos a la vez... ya se.. ya esta hecho... AHORA... pero cuando yo lo hice (año 1994) creo que no habia ninguno.

Lo programé en la primer PC que tuve, una AT286, con monitor fosforo blanco, y me llevo 9 meses, a 8 horas por dia (y mas... ), se podria decir que "lo parí"...

no lo tengo a mano ahora, pero en cuanto lo encuentre lo subo... ideal para probar en un VirtualBox o similar... jeje

Aqui adjunto unas capturas de pantalla de una version q pude encontrar. En estos dias lo compilo (ufff tengo q buscar el turbo pascal, quien sabe donde podra estar) y lo subo a rapidshare o alguno similar...

[caption id="attachment_9" align="alignnone" width="320" caption="Pantalla Intro"]<img class="size-full wp-image-9" title="pac01" src="http://mscifu.files.wordpress.com/2009/03/pac01.jpg" alt="Pantalla Intro" width="320" height="200" />[/caption]

[caption id="attachment_10" align="alignnone" width="320" caption="Menu Principal"]<img class="size-full wp-image-10" title="pac02" src="http://mscifu.files.wordpress.com/2009/03/pac02.jpg" alt="Menu Principal" width="320" height="200" />[/caption]

[caption id="attachment_11" align="alignnone" width="320" caption="Primer nivel"]<img class="size-full wp-image-11" title="pac03" src="http://mscifu.files.wordpress.com/2009/03/pac03.jpg" alt="Primer nivel" width="320" height="200" />[/caption]

[caption id="attachment_12" align="alignnone" width="320" caption="... y ahora me los como yo... "]<img class="size-full wp-image-12" title="pac04" src="http://mscifu.files.wordpress.com/2009/03/pac04.jpg" alt="... y ahora me los como yo... " width="320" height="200" />[/caption]

[caption id="attachment_14" align="alignnone" width="320" caption="Y aqui de a 2 players!!!"]<img class="size-full wp-image-14" title="pac05" src="http://mscifu.files.wordpress.com/2007/12/pac05.jpg" alt="Y aqui de a 2 players!!!" width="320" height="200" />[/caption]

me olvide  de comentar... tiene algunas caracteristicas interesantes. Por ejemplo, en el modo de 2 jugadores se puede optar por una modalidad "competitiva", que es muuuy divertida. Aqui cuando un jugador se come la pastillita para poder comerse a los fantasmas... ¡¡¡Tambien puede <strong>comerse a su compañero jajajajaja</strong>!!! en otros niveles puse pastillas para aumentar la velocidad, pasadizos que solo te dejan ir en una direccion... ufff

y 100 niveles.. todos diferentes... eso es lo que terminó de volverme completamente loco...

prometo tenerlo a la brevedad subido, y aviso (gracias at80286 por el comentario... te aviso cuando lo suba)

y finalmente... aqui esta, <a title="pacman.zip" href="http://www.megaupload.com/?d=UD6VY68Y">pacman.zip</a> ... probarlo idealmente en una 286 jajaja o sino en dosbox... no se porque pero los fantasmas andan recontra remal.. quedan trabados y no pueden bajar grrrr en una maquina real funciona perfecto .. en el dosbox no

¿alguien se anima a probarlo en virtualbox con un msdos 6 instalado? yo no tengo ganas ni tiempo :(

saludos a todosss]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2007-12-17 16:52:14</wp:post_date>
  <wp:post_date_gmt>2007-12-17 16:52:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mi-mayor-obra-de-arte</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="trabajos-propios"><![CDATA[Trabajos propios]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[at80286]]></wp:comment_author>
    <wp:comment_author_email>angel_tecnico@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>189.154.0.130</wp:comment_author_IP>
    <wp:comment_date>2009-03-28 23:19:21</wp:comment_date>
    <wp:comment_date_gmt>2009-03-28 23:19:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hey pues compilalo en EXE y pasalo
:)
saludos]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>7420288</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-03-28 23:19:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[at80286]]></wp:comment_author>
    <wp:comment_author_email>angel_tecnico@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>189.154.5.51</wp:comment_author_IP>
    <wp:comment_date>2009-04-01 18:04:50</wp:comment_date>
    <wp:comment_date_gmt>2009-04-01 18:04:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Bueno lo bajare tengo una compaq tipo portable III pero esta trae win98 y procesador 200MMX solo que la tengo en proceso de reparación, yo tambien hice 1 juego pero en gwbasic, era de tiro al blanco con formato de ciencia ficcion espacial,utilizando graficos basicos y muchos codigos ascii solo que estaba en diskettes de los grandototes de 5 1/4. y pues caminaron solo me queda el bonito recuerdo pero este pacman que diseñaste se ve bien matón. gracias por pasarlo :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>7420288</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-04-01 18:04:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>yyoyo</title>
  <link>https://mscifu.wordpress.com/6/</link>
  <pubDate>Fri, 21 Dec 2007 12:47:47 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2007/12/yyoyo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2007-12-21 12:47:47</wp:post_date>
  <wp:post_date_gmt>2007-12-21 12:47:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>9223372036854775807</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2007/12/yyoyo.jpg</wp:attachment_url>
</item>
<item>
  <title>validacion</title>
  <link>https://mscifu.wordpress.com/google8182a26c7b996d67/</link>
  <pubDate>Fri, 21 Dec 2007 14:12:49 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.wordpress.com/google8182a26c7b996d67/</guid>
  <description/>
  <content:encoded><![CDATA[solo eso... para Google]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2007-12-21 14:12:49</wp:post_date>
  <wp:post_date_gmt>2007-12-21 14:12:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>google8182a26c7b996d67</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title>pac01</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/pac01/</link>
  <pubDate>Mon, 30 Mar 2009 21:48:12 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2009/03/pac01.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Pantalla Intro]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2009-03-30 21:48:12</wp:post_date>
  <wp:post_date_gmt>2009-03-30 21:48:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pac01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>5</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2009/03/pac01.jpg</wp:attachment_url>
</item>
<item>
  <title>pac02</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/pac02/</link>
  <pubDate>Mon, 30 Mar 2009 21:48:15 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2009/03/pac02.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Menu Principal]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2009-03-30 21:48:15</wp:post_date>
  <wp:post_date_gmt>2009-03-30 21:48:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pac02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>5</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2009/03/pac02.jpg</wp:attachment_url>
</item>
<item>
  <title>pac03</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/pac03/</link>
  <pubDate>Mon, 30 Mar 2009 21:48:19 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2009/03/pac03.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Primer nivel]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2009-03-30 21:48:19</wp:post_date>
  <wp:post_date_gmt>2009-03-30 21:48:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pac03</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>5</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2009/03/pac03.jpg</wp:attachment_url>
</item>
<item>
  <title>pac04</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/pac04/</link>
  <pubDate>Mon, 30 Mar 2009 21:48:22 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2009/03/pac04.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[... y ahora me los como yo... ]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2009-03-30 21:48:22</wp:post_date>
  <wp:post_date_gmt>2009-03-30 21:48:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pac04</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>5</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2009/03/pac04.jpg</wp:attachment_url>
</item>
<item>
  <title>pac05</title>
  <link>https://mscifu.wordpress.com/2007/12/17/mi-mayor-obra-de-arte/pac05/</link>
  <pubDate>Mon, 30 Mar 2009 21:57:07 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2007/12/pac05.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Y aqui de a 2 players!!!]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2009-03-30 21:57:07</wp:post_date>
  <wp:post_date_gmt>2009-03-30 21:57:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pac05</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>5</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2007/12/pac05.jpg</wp:attachment_url>
</item>
<item>
  <title>Hello World!</title>
  <link>https://mscifu.wordpress.com/2017/04/01/hello_world/</link>
  <pubDate>Sat, 01 Apr 2017 13:27:36 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=26</guid>
  <description/>
  <content:encoded><![CDATA[Este es un tutorial que estoy realizando con la idea de aprender a programar lenguaje ensamblador para C64, utilizando modernas herramientas de desarrollo. Para ello utilizaremos el IDE CBMPRG Studio, que es una herramienta bastante reciente, en la que se puede desarrollar software para practicamente cualquier modelo de commodore, como las PET, VIC, C64 y C128.

No quiero poner como descargar e instalar el entorno de desarrollo, para descargarlo ir a la siguiente direccion: <a href="http://www.ajordison.co.uk/download.html">www.ajordison.co.uk/download.html</a>.

una guia introductoria: <a href="http://www.programmermind.com/CBMPrgStudioTutorial.html">www.programmermind.com/CBMPrgStudioTutorial.html</a>

y un video (a partir de 0:55): <a href="https://www.youtube.com/watch?v=2mifvS6qDQ0">CBM Prg Studio Demo | Arthur Jordison</a>

Si encuentro alguna otra referencia la agregaré aqui.

Asi que sin mas, vamos por el primer ejemplo: Configuracion - Creación de un proyecto y el clasico <strong>Hello World</strong>
<h2>Configuracion y Creacion de un proyecto</h2>
Antes que nada tenemos que configurar el emulador sobre el cual correremos nuestro codigo. Para ello vamos a <code>Tools - Options</code> y seleccionamos <code>Emulator control</code>.

Alli configuramos:
<ul>
 	<li>el target (en nuestro caso C64)</li>
 	<li>el path del emulador (Yo uso el WinVICE, le damos el path completo, incluido el ejecutable)</li>
 	<li>los parametros del emulador (para WinVICE: %prg)</li>
 	<li>le ponemos <code>2</code> donde dice <code>Wait seconds before launching</code> (si ponemos valores bajos puede pasar que cuando querramos compilar y ejecutar el proyecto no llegue a cargarse en la commodore)</li>
 	<li>y tildamos los dos checks.</li>
</ul>
una imagen vale mas que palabras:

<a href="https://mscifu.files.wordpress.com/2017/04/configuracion_ide.png"><img class="alignnone wp-image-66 size-full" src="https://mscifu.files.wordpress.com/2017/04/configuracion_ide.png" alt="" width="684" height="380" /></a>

Y ahora creamos un nuevo proyecto:
<ul>
 	<li>File - New Proyect</li>
 	<li>elejimos target (C64 por configuracion) - Next</li>
 	<li>damos un nombre al project (HelloWorld, no pongo espacios, porque me los pone en el nombre... creo que me hace despelote...) - Next</li>
 	<li>Click en <code>Create</code></li>
</ul>
y nos queda algo asi:

<a href="https://mscifu.files.wordpress.com/2017/04/primer_pantalla_proyecto.png"><img class="alignnone wp-image-67 size-full" src="https://mscifu.files.wordpress.com/2017/04/primer_pantalla_proyecto.png" alt="" width="673" height="470" /></a>

&nbsp;

Ahora vamos a crear un archivo .asm: vamos a la ventana <code>Project Explorer</code> y clickeamos con el boton derecho sobre <code>Assembly files</code>, seleccionamos <code>New</code>, y le damos el nombre <code>helloworld.asm</code>.
Luego vamos a File - Close Project, y cerramos el proyecto. Volvemos a abrirlo...
¿Para que hacemos todo esto? bueno, parece que esta version tiene algun que otro errorcillo, y haciendo esto salteamos un pequeño bug que tiene esta version (3.9.0). Si creamos un proyecto vamos a ver que en la configuracion del emulador va a generar el archivo <code>sample.prg</code> (y no se puede cambiar), pero al momento de compilar y ejecutar el archivo que va a buscar el emulador es helloworld.prg, y nunca lo va a encontrar. Salvamos, cerramos, volvemos a abrir, y si vamos nuevamente a la configuracion vemos que el archivo a generar es el correcto.
<blockquote><strong>NOTA:</strong> A pesar de ser la tercera version, el programa puede que tenga algun que otro error... no es la quinta esencia de estabilidad, pero es gratis, y a caballo regalado...
<strong>NOTA 2:</strong> El error viene por el lado que el programa parece estar, al momento de hacer <code>build and run</code> (<a href="https://mscifu.files.wordpress.com/2017/04/build_run_button.png"><img class="alignnone size-full wp-image-68" src="https://mscifu.files.wordpress.com/2017/04/build_run_button.png" alt="" width="20" height="18" /></a>) generando el .prg con el nombre del proyecto abierto anteriormente... no lo encuentra (entonces aparece la pantalla original de la commodore, sin muestra de haber cargado algo), o si previamente habiamos creado un archivo .bas lo muestra, pero el .asm no lo carga... y bueno... a probar. Funcionar funciona, pero tiene sus detalles, el autor continuamente esta corrigiendo errores, asi que supongo que en una proxima version estara mejorado.</blockquote>
<h2>Ahora EL CODIGO!!</h2>
<pre><code>*=$C000                 ; este es el origen donde se cargara el codigo en RAM. 
                        ; Para ejecutarlo desde BASIC escribimos SYS 49152.
       LDX #$0          ; L1
cycle  LDA hworld,X     ; L2
       CMP #0           ; L3
       BEQ exit         ; L4 
       STA $0400,X      ; L5
       INX              ; L6
       JMP cycle        ; L7
exit   RTS              ; L8

hworld text 'hello world!'  ; L9
       byte 0</code></pre>
El codigo es muy simple (si tenes un minimo conocimiento de ASM):
<ul>
 	<li>en L1 (ver comentario) inicializa el registro X con 0. El '#' indica que es <code>direccionamiento inmediato</code> y no hace otra cosa que cargar el valor que le indicamos (#$0) al registro X (uno de los 3 registros del 6502). Existen varios modos de direccionamiento, algun otro lo vemos aca, el resto en siguientes tutoriales.</li>
 	<li>en L2 tenemos una etiqueta, que utilizaremos para hacer un ciclo. A continuacion hay una instruccion que carga en el registro A el contenido de la direccion de memoria <code>hworld + X</code>. Esto se conoce como <code>direccionamiento absoluto indexado</code>, llamado asi porque usamos X como indice para acceder a las direcciones de memoria a partir de 'hworld'. Esto es util para manejar tablas, strings, copiar bloques de memoria, etc.</li>
 	<li>en L3 comparamos el contenido de A con 0. En la siguiente linea saltamos a la etiqueta <code>exit</code> si es igual (Branch on EQual). Esto es asi porque vamos a ver un poco mas adelante que donde definimos <code>hworld</code> tenemos una cadena, e inmediatamente en la siguiente linea tenemos un valor <code>byte</code> con valor 0. Este valor es el que se lee e indica que el string finalizo.</li>
 	<li>a L5 llegamos si no se cumple la condicion de las 2 anteriores lineas. Esta linea almacena el contenido cargado previamente en A en la direccion <code>$0400 + X</code>, que corresponde con el primer caracter en la pantalla. En la siguiente linea se incrementa X, y en la siguiente se hace un salto a la etiqueta <code>cycle</code>.</li>
 	<li>La ultima linea de codigo tiene la instruccion RTS, que indica que vuelva de la llamada realizada... ¿cual llamada? Bueno, para ejecutar este codigo nosotros tipeamos <code>SYS 49152</code> desde BASIC, y si no ponemos esta instruccion no retorna mas, o falla estrepitosamente.</li>
</ul>
<pre><code>**NOTA de etiqueta hworld**: de esta manera podemos definir bloques de codigo, tablas, texto, graficos, sprites... en este ejemplo, la etiqueta queda definida como la cadena de texto 'hello world!' y a continuacion un byte con valor 0. Se pueden combinar de diferentes formas, para armar las estructuras de datos que necesitemos acceder.</code></pre>
Bueno, solo queda hacer build and run, clickeando en el boton <a href="https://mscifu.files.wordpress.com/2017/04/build_run_button.png"><img class="alignnone size-full wp-image-68" src="https://mscifu.files.wordpress.com/2017/04/build_run_button.png" alt="" width="20" height="18" /></a>. Si todo esta bien inicia el VICE, y carga el .prg generado. Solo queda escribir <code>SYS 49152</code> y tiene que aparecer el texto en la primera linea de la pantalla.

<a href="https://mscifu.files.wordpress.com/2017/04/result.png"><img class="alignnone size-medium wp-image-69" src="https://mscifu.files.wordpress.com/2017/04/result.png?w=300" alt="" width="300" height="213" /></a>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2017-04-01 13:27:36</wp:post_date>
  <wp:post_date_gmt>2017-04-01 13:27:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello_world</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3517216636]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[26]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>6502 Basico - Registros</title>
  <link>https://mscifu.wordpress.com/2017/04/01/6502-basico-registros-tutorial-cbm-prg-studio/</link>
  <pubDate>Sat, 01 Apr 2017 13:34:30 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=29</guid>
  <description/>
  <content:encoded><![CDATA[<p>El 6502 es muy simple, es un micro de 8 bits, tiene 40 y pico de instrucciones, puede direccionar hasta 64K, tiene 3 registros internos (un acumulador y dos de uso general)... no hay demasiado que decir. En el ejemplo anterior hicimos un programita simple, al que vamos a ampliar con un poco de teoria.</p>
<h2>Registros</h2>
<p>Tenemos 3 registros internos, la ventaja que tienen es que son de uso inmediato, la desventaja es que son pocos :(<br />
Vamos a explicar como funciona el acumulador, que es el mas importante a mi parecer de los 3. Los otros dos registros tienen otras aplicaciones, que ya iremos viendo.</p>
<h2>A (acumulador)</h2>
<p>Maneja toda la aritmetica y logica, cualquier operacion de suma y resta la tendremos que hacer con este registro, asi como tambien las operaciones logicas (AND, OR, NOT). Las 2 principales instrucciones para utilizar este registro son LDA y STA, la primera carga en el acumulador, y la segunda almacena el contenido del acumulador donde indiquemos.  </p>
<p>Aqui tenemos una tablita con los <code>modos de direccionamiento</code> (ya veremos de que se tratan) y la sintaxis.</p>
<table style="width:100%;"><thead><tr><th style="width:50%;" colspan="2">LDA</th>
            <th style="width:50%;" colspan="2">STA</th>
        </tr><tr><th style="width:25%;">Direccionamiento</th>
            <th style="width:25%;">Sintaxis</th>
            <th style="width:25%;">Direccionamiento</th>
            <th style="width:25%;">Sintaxis</th>
        </tr></thead><tbody><tr><td>Immediate</td>
            <td>LDA #$44</td>
            <td>Zero Page</td>
            <td>STA $44</td>
        </tr><tr><td>Zero Page</td>
            <td>LDA $44</td>
            <td>Zero Page,X</td>
            <td>STA $44,X</td>
        </tr><tr><td>Zero Page,X</td>
            <td>LDA $44,X</td>
            <td>Absolute</td>
            <td>STA $4400</td>
        </tr><tr><td>Absolute</td>
            <td>LDA $4400</td>
            <td>Absolute,X</td>
            <td>STA $4400,X</td>
        </tr><tr><td>Absolute,X</td>
            <td>LDA $4400,X</td>
            <td>Absolute,Y</td>
            <td>STA $4400,Y</td>
        </tr><tr><td>Absolute,Y</td>
            <td>LDA $4400,Y</td>
            <td>Indirect,X</td>
            <td>STA ($44,X)</td>
        </tr><tr><td>Indirect,X</td>
            <td>LDA ($44,X)</td>
            <td>Indirect,Y</td>
            <td>STA ($44),Y</td>
        </tr><tr><td>Indirect,Y</td>
            <td>LDA ($44),Y</td>
            <td> </td>
            <td> </td>
        </tr></tbody><tbody></tbody></table>
<h3>Modos de direccionamiento</h3>
<p><strong>Immediate:</strong> el mas basico, lo que quiere decir es que el operando que le pongamos se cargará en el acumulador. Notar que antes del 44 hay dos simbolos: # y $, el primero indica que es inmediato, el segundo que es un valor hexadecimal. Es la asignacion de variables de toda la vida que tenemos en cualquier otro lenguaje de alto nivel.</p>
<p><strong>Zero Page:</strong> esto ya es mas raro, carga en A el contenido que se encuentre en la memoria, en la direccion que le pasamos. ¿Por que es Zero Page? porque hace referencia a los primeros 256 bytes de memoria, conocida como la pagina cero. El 6502 tiene estas instrucciones <code>Zero Page</code> debido a que consumen menos memoria y ciclos de clock, asi que si necesitamos optimizar codigo, es bueno utilizarlas, siempre teniendo en cuenta que contaremos con 256 para manejar, nada mas. </p>
<p><strong>Absolute:</strong> lo mismo que Zero Page, pero pudiendo utilizar toda la memoria. Obviamente, la instruccion ocupa mas en memoria, porque el operando es de 16 bits, y tambien consume mas ciclos de reloj.</p>
<p><strong>Modos indexados absolutos y zero page</strong>: son aquellos que se adiciona <code>,X</code> <code>,Y</code>. Lo que hacen es adicionar al valor que le pasamos como operando el valor del registro (X o Y). Este modo es util cuando queremos copiar bloques de datos, cadenas, manejar arreglos, etc. Despues son lo mismo que los anteriores, absolutos o zero page.</p>
<p><strong>Indirecto X, Indirecto Y:</strong> son mas complicados de utilizar que los anteriores, se basan en que el operando que le pasamos contiene el byte bajo, y la siguiente el alto de la direccion que apunta, ademas del indice X o Y. Como pueden ver en la sintaxis difieren, es porque segun el registro que utilicemos se realiza el calculo de una u otra forma. Como de momento no voy a utilizar este direccionamiento (y tampoco lo tengo tan claro como para explicarlo, je), les paso un enlace donde esta explicado mas detalladamente: <a href="http://www.dwheeler.com/6502/oneelkruns/asm1step.html">Assembly in one step</a></p>
<p><strong>NOTA INTERESANTE (encontrado en el link anterior):  </strong></p>
<pre><code>   Indexed Indirect Addressing

   Find the 16-bit address starting at the given location plus the 
   current X register.  The value is the contents of that address.  For 
   example,

      LDA ($B4,X)  where X contains 6

   gives an address of $B4 + 6 = $BA.  If $BA and $BB contain $12 and 
   $EE respectively, then the final address is $EE12.  The value at 
   location $EE12 is put in the accumulator.

   Indirect Indexed Addressing

   Find the 16-bit address contained in the given location ( and the one 
   following).  Add to that address the contents of the Y register.  
   Fetch the value stored at that address.  For example,

      LDA ($B4),Y  where Y contains 6

   If $B4 contains $EE and $B5 contains $12 then the value at memory 
   location $12EE + Y (6) = $12F4 is fetched and put in the accumulator.</code></pre>
<p><strong>NOTA: es importante tener claro como funcionan los diferentes modos de direccionamiento, tanto para programar como para optimizar codigo. Algunas instrucciones tienen menos modos, otras creo que mas (no estoy seguro). Los registros auxiliares, por ejemplo, tienen modos distintos entre ellos, o sea que lo que podes hacer con X no lo podes hacer con Y... </strong></p>
<p>Para mas informacion podes ir <a href="http://www.6502.org/tutorials/6502opcodes.html">aqui</a>, para una lista completa de los opcodes del 6502.    </p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2017-04-01 13:34:30</wp:post_date>
  <wp:post_date_gmt>2017-04-01 13:34:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6502-basico-registros-tutorial-cbm-prg-studio</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3517387409]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>6502 Basico - Saltos, Branches, Subrutinas</title>
  <link>https://mscifu.wordpress.com/2017/04/01/6502-basico-saltos-branches-subrutinas/</link>
  <pubDate>Sat, 01 Apr 2017 15:47:18 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=40</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Instrucciones de salto</h2>
<p>Las instrucciones de salto son el equivalente al GOTO del BASIC, con la diferencia que algunas son condicionales, o sea, ejecutan el salto si ocurre algo, generalmente en el registro de STATUS. Generalmente hacemos uso de las mismas luego de alguna operacion de comparacion, o simplemente un incremento o decremento de un registro.<br />
A continuacion tenemos una tabla con las mas comunes, si queres ver todas anda a <a href="http://www.6502.org/tutorials/6502opcodes.html#BRA">Branch Instructions</a>.</p>
<table style="width:100%;"><thead><tr><th style="width:30%;">Instruccion</th>
            <th style="width:70%;">Accion</th>
        </tr></thead><tbody><tr><td>JMP - JuMP</td>
            <td>Hace un salto a la direccion de memoria que indiquemos. equivalente a GO TO en BASIC</td>
        </tr><tr><td>
                BEQ - Branch on EQual zero <br> 
                BNE - Branch on Not Equal zero
            </td>
            <td>Salta si el resultado de la ultima operacion es igual a cero para BEQ, o o distinto a cero para BNE. La longitud de los saltos no puede ser menor a 127 bytes de distancia hacia atras, o 128 hacia adelante. Esto es asi porque el operando es un byte con signo, que establece cuantos bytes tiene que saltar (el salto es relativo, por lo tanto el codigo es relocalizable de esta manera). Por suerte en el macro assembler solo ponemos la etiqueta hacia donde queremos saltar, y el calculo lo realiza el programa.</td>
        </tr><tr><td>
                JSR - Jump to SubRoutine<br>
                RTS - ReTurn from Subroutine
            </td>
            <td>Hace un salto hacia la direccion de memoria, guarda el valor del Program Counter en el Stack, y cuando llega al RTS retorna a la posicion de memoria siguiente que se ejecuto la instruccion. El equivalente del GO SUB de BASIC.</td>
        </tr></tbody></table>
<p>No pongo mas, porque para los objetivos proximos de este tutorial son mas que suficientes, y si encuentro alguna otra instruccion explicaré que hace... tampoco es cuestion de llenar de teoria, con que sepas esto es suficiente.  </p>
<h2>Instrucciones de comparación</h2>
<p>Voy a explicar la instruccion CMP, que compara un valor (segun su direccionamiento) con el acumulador. Elijo esta porque es la que tiene mas modos de direccionamiento, CPX y CPY son iguales, salvo que solo tienen los modos de direccionamiento <strong>Inmediato, Zero page y Absoluto.</strong></p>
<p>Las instrucciones de comparacion setean los flags del STATUS como si se hubiese llevado a cabo una resta, Si el valor en el acumulador es igual se establece el flag Zero. Si queremos hacer comparaciones tipo 'menor', 'mayor', etc... hay que jugar un poco mas con los bits de STATUS...</p>
<p>Los modos de direccionamiento soportados son muy similares a los de la instruccion LDA, por lo que no considero que haya que explicar mucho. Si entendiste lo anterior, ya sabes esto.</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2017-04-01 15:47:18</wp:post_date>
  <wp:post_date_gmt>2017-04-01 15:47:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6502-basico-saltos-branches-subrutinas</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3520810941]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Flashing Border</title>
  <link>https://mscifu.wordpress.com/2017/04/01/flashing_border/</link>
  <pubDate>Sat, 01 Apr 2017 15:49:42 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=42</guid>
  <description/>
  <content:encoded><![CDATA[Hoy vamos a hacer un programita muy simple, pero con un efecto muy interesante, sobre todo porque lo hacemos en lenguaje maquina, y le da ciertas particularidades.
Este consistirá en un loop infinito que va ciclando los colores del borde. Al realizar el cambio tan rapidamente (mas incluso que la velocidad de refresco de pantalla, e incluso mas veloz que el barrido vertical) se mostrara como una serie de lineas horizontales de colores... para muestra, una captura.

<a href="https://mscifu.files.wordpress.com/2017/04/captura.png"><img class="alignnone size-full wp-image-71" src="https://mscifu.files.wordpress.com/2017/04/captura.png" alt="" width="384" height="273" /></a>

&nbsp;
<h2>Codigo</h2>
<pre><code>*=$c000

          ldx            #$0       
ciclo     stx            $d020
          inx
          jmp            ciclo     </code></pre>
ok, es muy basico... lo unico que hacemos es incrementar el registro x en un ciclo infinito. Al ser un registro de 8 bits, cuando pasa el valor 255 vuelve a 0.
<strong>¿y $D020?</strong> bueno, es la direccion del color de borde de la pantalla en la C64 (si cambiamos a $d021 cambia el fondo).
<strong>¿y por que las rayas?</strong> Eso es debido a la velocidad con la que se realiza, ya que el cambio de borde se realiza incluso antes que la linea cruce la pantalla, de ahi que se puedan apreciar incluso "columnas" de rayas.

Podemos darle un poco mas de complejidad, de paso usamos un condicional... vamos a hacer que cicle entre 2 colores, 0 (negro) y 1 (blanco).

<a href="https://mscifu.files.wordpress.com/2017/04/captura2.png"><img class="alignnone size-full wp-image-72" src="https://mscifu.files.wordpress.com/2017/04/captura2.png" alt="" width="384" height="273" /></a>
<pre><code>*=$c000

init      ldx            #$0       
ciclo     stx            $d020
          inx
          cpx            #$02      
          bne            ciclo     
          jmp            init      </code></pre>
Aqui introducimos un 'if', aunque aca la instruccion es CPX, que en su modo inmediato compara el valor con $02, si no es igual (bne) sigue ciclando, pero si es igual salta a la siguiente instruccion, que hace un salto a la primera instruccion, en la que se inicializa en 0... o sea, X va tomando los valores 0, 1, 0, 1, .... ad infinutum.

Ok, sigue muy elemental... vamos a darle algo <strong>un poco mas interesante...</strong> vamos a hacer que dibuje una barra horizontal. Para ello vamos a ver el valor de $d012 que contiene la "posicion" del haz que dibuja la pantalla (tecnicamente: <code>raster</code>), y en un determinado valor vamos a cambiar el color, luego esperamos un valor un poco mas alto (una posicion mas avanzada del dibujado de pantalla) y volvemos a poner el color anterior.

<a href="https://mscifu.files.wordpress.com/2017/04/captura3.png"><img class="alignnone size-full wp-image-74" src="https://mscifu.files.wordpress.com/2017/04/captura3.png" alt="" width="384" height="272" /></a>

&nbsp;
<pre><code>*=$c000

init      ldx            #$0
          stx            $d020 
          stx            $d021     

; inicio de la barra horizontal          
waitrt   lda            $d012
          cmp            #60       
          bne            waitrt 

          ldx            #$1      
          stx            $d020     
          stx            $d021

; fin de la barra horizontal          
waitw    lda            $d012
          cmp            #75       
          bne            waitw

          jmp            init      </code></pre>
Esto ya toma color, bueno, sigue blanco y negro (un buen ejercicio seria cambiar los colores, que definimos en las 2 instrucciones LDX, previas a los STA a fondo y borde).
Aqui inicia seteando el color de fondo y borde en negro, y en la etiqueta <code>wait_rt</code> inicia un ciclo en el que carga en LDA el valor de la posicion del raster y la compara con un valor arbitrario, que es el que define la posicion vertical de la barra (mas o menos...).
Cuando es igual a $60 cambia los colores de fondo y borde, y va a otro ciclo en el que compara con un valor mas grande, que es el que define el ancho de la barra. Finalmente, cuando alcanza el nuevo valor hace un JMP a la etiqueta init, que setea los colores originales.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2017-04-01 15:49:42</wp:post_date>
  <wp:post_date_gmt>2017-04-01 15:49:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>flashing_border</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3520873498]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Macros</title>
  <link>https://mscifu.wordpress.com/2017/04/01/macros/</link>
  <pubDate>Sat, 01 Apr 2017 15:53:32 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=44</guid>
  <description/>
  <content:encoded><![CDATA[Venimos de <a href="http://www.mscifu.com.ar/blog/flashing_border">Flashing Border - Tutorial CBM prg Studio</a>...

Una ventaja de usar un macro assembler es justamente la posibilidad de escribir macros. Estas nos permiten definir un bloque de instrucciones que se 'generaran' en el codigo cada vez que las invoquemos. Podria decirse que son como funciones, pero se diferencian de las mismas en que no son llamadas a subrutinas que hace el micro, sino que directamente es codigo que se incrusta en el lugar en que se invoca la llamada, y que ese codigo lo genera el macro assembler.

Las macros se definen usando los comandos ´defm´ y ´endm´. Tambien se pueden definir hasta 20 parametros para pasarle. Un ejemplo de macro sencilla seria:
<pre><code>defm        miMacro
            ldx     #/2
            stx     /1
            endm</code></pre>
En este ejemplo, definimos una macro llamada ´mi_macro´, a la que le pasaremos como primer parametro una direccion de memoria, y como segundo parametro un valor. De esta manera nos queda un equivalente al comandp ´POKE´ en BASIC. La forma de llamarla seria:
<pre><code>            miMacro $d020,1
            miMacro $d021,     ; Aqui toma por defecto 0, al no pasarle parametro</code></pre>
<h2>Consideraciones a tener en cuenta</h2>
<ul>
 	<li>Las macros hay que definirlas antes de usarlas</li>
 	<li>Pueden definirse macros globales, simplemente agregando '$' al final del nombre de (ej: mi_macro$). Unicamente hay que tener en cuenta que el archivo que contenga las macros globales debe ser el primero del proyecto.</li>
 	<li>si hay que usar etiquetas dentro de las macros estas tienen que estar precedidas por '@'. Esto hace que sean locales a la etiqueta o macro que las contengan.</li>
 	<li>una macro no puede tener una longitud superior a 1000 lineas.</li>
</ul>
<h2>Codigo de ejemplo</h2>
<pre><code>*=$c000

defm      waitRaster    ; espera el inicio del barrido de pantalla
@waitrt                 
          ldx            $d012     
          cpx            #80       
          bne            @waitrt  
          endm

defm      paperColor    ; establece el fondo de pantalla
          ldx            #/1       
          stx            $d021
          ldx            #$00 
@loop                     ; una pausa para engrosar la linea
          inx
          cpx            #20
          bne            @loop     
          endm

loop
          waitRaster
          paperColor   0         
          paperColor   11        
          paperColor   12        
          paperColor   15        
          paperColor   1         
          paperColor   15        
          paperColor   12
          paperColor   11        
          paperColor   0         
          jmp            loop      </code></pre>
<strong>y el resultado final:</strong>

<a href="https://mscifu.files.wordpress.com/2017/04/raster_bar.png"><img class="alignnone size-full wp-image-76" src="https://mscifu.files.wordpress.com/2017/04/raster_bar.png" alt="" width="384" height="271" /></a>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2017-04-01 15:53:32</wp:post_date>
  <wp:post_date_gmt>2017-04-01 15:53:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>macros</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3520972602]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Sprites</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites/</link>
  <pubDate>Sat, 01 Apr 2017 15:56:04 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=46</guid>
  <description/>
  <content:encoded><![CDATA[Recuerdo una de las primeras cosas que aprendi a programar fueron graficos, concretamente a redefinir los 'UDG' en la ZX Spectrum, máquina con la hice mis primeras armas en programación. Luego me compre una C64, la cual tenia la ventaja de ser una maquina mas poderosa, pero mas inaccesible al momento de programar.
En realidad lo mas importante que hay que saber para dibujar sprites (y toquetear todas las cosas que tiene el VIC II) es el siguiente número mágico: $d000 (53248 en decimal). Esta es la direccion base de los 47 registros que tiene la C64 para hacer maldades con el video (y mira que le sobra para hacer cosas).
De paso vamos a trabajar con bloques de datos en el macro assembler. Estos nos permiten facilmente definir cadenas (por ejemplo, en el 'Hello World' que hicimos previamente usamos una cadena de texto), o bloques de data, de forma muy similar a como utilizabamos DATA en BASIC. Esto es medio largo, asi que comencemos:

Para definir datos lo unico que debemos hacer es hacer una etiqueta, luego escribimos el tipo de dato (text, byte, word, bits), y a continuación el valor. En el siguiente ejemplo vamos a definir una etiqueta <code>pacman</code>, que contendra la definición de un sprite, como el siguiente:

<a href="https://mscifu.files.wordpress.com/2017/04/sprite_pacman.png"><img class="alignnone size-full wp-image-79" src="https://mscifu.files.wordpress.com/2017/04/sprite_pacman.png" alt="" width="192" height="168" /></a>

&nbsp;
<pre><code>pacman      bits ..........BBBBB.........
            bits .......BBBBBBBBBBB......
            bits ......BBBBBBBBBBBBB.....
            bits .....BBBBBBB..BBBBBB....
            bits ....BBBBBBBB.BBBBBBBB...
            bits ...BBBBBBBBBBBBBBBBBBB..
            bits ...BBBBBBBBBBBBBBBBB....
            bits ...BBBBBBBBBBBBBB.......
            bits ..BBBBBBBBBBBBB.........
            bits ..BBBBBBBBBBB...........
            bits ..BBBBBBBB..............
            bits ..BBBBBBBBBBB...........
            bits ..BBBBBBBBBBBBB.........
            bits ...BBBBBBBBBBBBBB.......
            bits ...BBBBBBBBBBBBBBBBB....
            bits ...BBBBBBBBBBBBBBBBBBB..
            bits ....BBBBBBBBBBBBBBBBB...
            bits .....BBBBBBBBBBBBBBB....
            bits ......BBBBBBBBBBBBB.....
            bits .......BBBBBBBBBBB......
            bits ..........BBBBB.........</code></pre>
Con esto ya tenemos los valores en memoria para el sprite. Nótese que no tuvimos que convertir de binario a decimal ni toda la parafernalia que lleva hacer eso, simplemente definimos una etiqueta que tendra los 63 bytes necesarios para la imagen, nada mas que codificados de una manera mas piola... Tambien podriamos haber puesto lo siguiente:
<pre><code>pacman  byte    0, 62, 0 
        byte    1, 255, 192
        .
        .
        .</code></pre>
Pero tenemos que tomarnos el trabajo de convertir los bits de la imagen a binario, y luego pasarlos a decimal.
Con esto ya tenemos definido el sprite, ahora tendremos que copiar estos datos a una parte de la memoria que pueda ser accesible por el VIC...
<h2>Punteros de Sprites</h2>
Los punteros de sprites son las direcciones de memoria, para cada sprite, que contienen la direccion en que estan los datos del mismo. Estas van de $07f8 (2040) para el sprite 1 a $07ff(2047) para el sprite 8. Peeero si para acceder a una direccion de memoria necesitamos 2 bytes... ¿Como podemos especificar donde estan los datos de nuestro sprite con solamente un byte?.
Los punteros de sprite se manejan de una forma muy particular. Primero de todo, solamente podemos apuntar a datos que esten en el mismo banco de memoria en el que tengamos la memoria de pantalla. Tenemos 4 bancos, el primero de ellos ($0000-$3fff) es el que se usa por defecto. Un sprite toma 63 bytes de datos, pero tienen que estar en intervalos de 64 bytes, asi que se pueden poner los datos en las direcciones $0000, $0040, $0080, $0c00, $0100 ...
En cada banco del VIC podemos tener hasta 256 sprites... voila, eso es lo que podemos representar con un byte... ¿se entiende como funciona el cachivache? Si pongo el valor $0 en $07f8 los datos del sprite deberemos tenerlos en la direccion $0000, si ponemos $1 entonces en $0040... y asi hasta completar el banco... y si quisieramos hacer una animacion solamente tenemos que cambiar el puntero y tendremos la animacion con los diferentes frames.

Ahora vamos a copiar los datos del sprite a la direccion $$0400, que corresponde al puntero $10. Esta pequeña rutina a continuacion toma los datos de la etiqueta <code>pacman</code> y los copia a la direccion $0400
<pre><code>movedata    ldx #$00
loop        lda pacman, x
            sta $$0400,x
            inx
            cpx #$3f
            bne loop
            rts</code></pre>
<h2>Direcciones importantes del VIC II</h2>
Para este ejemplo vamos a utilizar el sprite 1, por lo que necesitaremos activarlo, posicionarlo en pantalla, darle color y especificar donde estan los datos que definen su forma. Para ello utilizaremos los siguientes registros:
<table>
<tbody>
<tr>
<td>$00 (0)</td>
<td>$d000 (53248)</td>
<td>Coordenada x sprite 0</td>
</tr>
<tr>
<td>$01 (1)</td>
<td>$d001 (53249)</td>
<td>Coordenada y sprite 0</td>
</tr>
<tr>
<td>$15 (21)</td>
<td>$d015 (53269)</td>
<td>Sprite enable. aca controlamos cual de todos activamos</td>
</tr>
<tr>
<td>$27 (39)</td>
<td>$d027 (53287)</td>
<td>Color sprite 0</td>
</tr>
<tr>
<td>(*)</td>
<td>$07f8 (2040)</td>
<td>Puntero de memoria del sprite 0</td>
</tr>
</tbody>
</table>
<strong>(*) no es un registro del VIC, pero necesitamos esta direccion para especificar donde estan los datos de nuestro sprite.</strong>

Para mas detalle de los registros, o si queremos utilizar otro sprite en el ejemplo: <a href="http://www.zimmers.net/cbmpics/cbm/c64/vic-ii.txt">registros del VIC II</a>.
<h2>Ejemplo con sprite 0</h2>
<pre><code>* = $c000
          lda            #$00      
          sta            $d020     
          sta            $d021     ; ponemos borde y fondo negro

          lda            #$01      
          sta            $$d015    ;activamos el sprite 0

          lda            #172      
          sta            $d000     
          lda            #139
          sta            $d001     ; lo centramos en la pantalla (172,139)

          lda            #$07      
          sta            $d027     ; lo ponemos color amarillo

          lda            #$10      
          sta            $07f8     ; ponemos el puntero del sprite 0 en $0100

          jsr            movedata  
          rts

movedata  ldx            #$0
loop      lda            pacman,x  
          sta            $0400,x   
          inx
          cpx            #$3f      
          bne            loop
          rts

pacman    bits           ..........BBBBB.........
          bits           .......BBBBBBBBBBB......
          bits           ......BBBBBBBBBBBBB.....
          bits           .....BBBBBBB..BBBBBB....
          bits           ....BBBBBBBB.BBBBBBBB...
          bits           ...BBBBBBBBBBBBBBBBBBB..
          bits           ...BBBBBBBBBBBBBBBBB....
          bits           ...BBBBBBBBBBBBBB.......
          bits           ..BBBBBBBBBBBBB.........
          bits           ..BBBBBBBBBBB...........
          bits           ..BBBBBBBB..............
          bits           ..BBBBBBBBBBB...........
          bits           ..BBBBBBBBBBBBB.........
          bits           ...BBBBBBBBBBBBBB.......
          bits           ...BBBBBBBBBBBBBBBBB....
          bits           ...BBBBBBBBBBBBBBBBBBB..
          bits           ....BBBBBBBBBBBBBBBBB...
          bits           .....BBBBBBBBBBBBBBB....
          bits           ......BBBBBBBBBBBBB.....
          bits           .......BBBBBBBBBBB......
          bits           ..........BBBBB.........</code></pre>
y el resultado final:

<a href="https://mscifu.files.wordpress.com/2017/04/final.png"><img class="alignnone size-full wp-image-80" src="https://mscifu.files.wordpress.com/2017/04/final.png" alt="" width="370" height="268" /></a> &lt;--<a href="https://mscifu.files.wordpress.com/2017/04/sprite_pacman.png"><img class="alignnone size-full wp-image-79" src="https://mscifu.files.wordpress.com/2017/04/sprite_pacman.png" alt="" width="192" height="168" /></a>
<h2>Consideraciones a tener en cuenta</h2>
<ul>
 	<li>algo interesante que hice adrede es poner la el puntero del sprite en el inicio de la memoria de video. Toda esa basura que se puede ver en la parte superior de la pantalla es la definicion del sprite. Nótese ademas que llevé el cursor al primer caracter de la pantalla, lo que hizo aparecer un puntito en el sprite. Es interesante que podemos borrar los caracteres, y ver como se borra el sprite. Por ejemplo, puedo borrar de a 3 caracteres, lo que hara que quede como interlineado (en realidad, ponemos un caracter <code>@</code> que en binario es 00000000):
<a href="https://mscifu.files.wordpress.com/2017/04/final2.png"><img class="alignnone size-full wp-image-81" src="https://mscifu.files.wordpress.com/2017/04/final2.png" alt="" width="384" height="271" /></a></li>
 	<li>para centrar en la pantalla en teoria deberia poner 160x100, ya que la resolucion de la C64 es de 320x200. Pero los sprites pueden estar posicionados en CUALQUIER lugar de la pantalla, haciendo algo que se conoce como <code>apertura de bordes</code>, asi que la posicion 0 en realidad no es al lado del borde, sino al lado del borde de la pantalla.</li>
 	<li>Estamos definiendo en un area de memoria el sprite, y luego lo copiamos a otra, dado que si no el VIC no podria acceder a los datos... en realidad es ineficiente, los datos del sprite habria que tenerlos en disco, aparte, y cargarlos donde correspondan, que sean accesibles por el VIC.</li>
 	<li>Definimos el sprite con <code>bits ........BBBBBBBB........</code>, pero solo para este ejemplo... en realidad es mejor utilizar alguna herramienta que nos genere esos datos y cargarlos de disco.</li>
 	<li>pueden toquetear el codigo, definir otro sprite, usar otros sprites (1,2,3,...7), cambiar los colores, o directamente desde BASIC, haciendo POKE's a las direcciones correspondientes para ver como cambia... O poner una direccion mas adecuada para el puntero de datos del sprite... no se, jueguen ...</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2017-04-01 15:56:04</wp:post_date>
  <wp:post_date_gmt>2017-04-01 15:56:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sprites</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521037690]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Sprites en movimiento</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites-en-movimiento/</link>
  <pubDate>Sat, 01 Apr 2017 15:58:34 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=49</guid>
  <description/>
  <content:encoded><![CDATA[Hoy vamos a mover el sprite que hicimos por la pantalla, utilizando el joystick en el port 2.

Los joysticks son manejados una de las CIA que tiene la C64, para ello vamos a leer la direccion de memoria $dc00 que corresponde al joystick 2. Los bits 0,1,2,3 corresponden a las direcciones (0 up, 1 down, 3 right, 4 left) y el bit 5 correspondiente al disparo. Si leemos la direccion vamos a notar que nos devuelve el valor 127, y cuando movemos en alguna direccion o disparamos se pone el bit correspondiente en 0. Hay muchas formas de leer esto, pero me parecio la mas simple la siguiente:
<blockquote>Cargamos en el registro A el contenido de $dc00, le hacemos un AND (1, 2, 4, 8, 16), y si da 0 es porque esta pulsado el joy en la direccion que estamos chequeando, entonces incrementamos o decrementamos el registro de posicion X o Y del sprite correspondiente, y proseguimos a chequear otra direccion de movimiento.</blockquote>
El codigo es mas claro:
<pre><code>joy2 = $dc00

main_loop
          lda            joy2      ; cargo en A el contenido de $DC00
          cmp            #127      
          beq            next      ; si es 127 (11111111) es que no pulse nada, salteo el checkeo restante

; aca entra si se pulso algo en el joystick
          lda            joy2      
          and            #1        ; up (11111110 AND 00000001 = 0 si pulso arriba, si no es 1)
          bne            chkDown   ; si el resultado de la ultima operacion es 1 pasa a chequear otra direccion de movimiento (*)
          dec            spry      ; y si no decrementa posicion Y del sprite 1 

chkDown   lda            joy2      
          and            #2        ; down
          bne            chkLeft   
          inc            spry      

chkLeft   lda            joy2      
          and            #8        ; left
          bne            chkRight  
          dec            sprx      

chkRight  lda            joy2      
          and            #4        ; right
          bne            chkFire   
          inc            sprx      

chkFire   lda            joy2      
          and            #16       ; fire
          bne            next      
          rts                      ; vuelve al BASIC
next
          jmp            main_loop 
</code></pre>
La parte mas 'rara' de entender para mi fue donde señalé con (1). BNE es una instruccion que hace un salto si la comparacion previa da distinto:
ejemplo: tengo en X el valor #5, hago CPX #6 y la siguiente instruccion BNE va a saltar, porque el resultado de la comparacion da que son diferentes.
Ahora ¿como hace la comparacion el procesador? Simple, lo que hace es una resta, y si da 0 es que son iguales, y si da distinto de 0 son diferentes.
En este caso estamos haciendo una operacion logica AND, y si el resultado de la operacion es 1 hace un salto (porque BNE hace un salto si el resultado de la ultima operacion es distinto de 0). Si da 0 es porque el bit de la direccion que queremos testear se pone en 0, BNE no hace el salto, pasa a la siguiente instruccion que (o casualidad) decrementa o incrementa la posicion X/Y del sprite.
<strong>¿Se entiende?</strong>
<h2>Aca el codigo completito</h2>
Cambiamos el sprite del pacman por el del juego Jetpac, de la ZX Spectrum, lo podemos mover con el joystick conectado al port 2, y volvemos al BASIC con el disparo. La idea con este codigo es ir incorporando bloques para armar un pequeño juego. En las siguientes entregas vamos a agregar disparos, colisiones, 2 jugadores... lo que salga...
<pre><code>*         = $c000

raster    = $d012
cborde    = $d020
cfondo    = $d021
spractive = $d015
sprcolor  = $d027
sprpoint  = $07f8
sprx      = $d000
spry      = $d001
joy2      = $dc00

defm      putsprite
          ldx            #/1       
          stx            sprx
          ldx            #/2       
          stx            spry
          endm

defm      waitrt
@loop     ldx            raster
          cpx            #$0       
          bne            @loop     
          endm

main      lda            #$00      
          sta            cborde     
          sta            cfondo

          putsprite      172,139     

          lda            #$01      
          sta            spractive ;activamos el sprite 0

          lda            #$01      
          sta            sprcolor  ; lo ponemos color blanco

          lda            #$0d      
          sta            sprpoint  ; ponemos el puntero del sprite 0 en $0340

          jsr            movedata  

main_loop
;         check joystick 
          lda            joy2      
          cmp            #127      
          beq            next      

          lda            joy2      
          and            #1        ; up
          bne            chkDown   
          dec            spry      

chkDown   lda            joy2      
          and            #2        ; down
          bne            chkLeft   
          inc            spry      

chkLeft   lda            joy2      
          and            #8        ; left
          bne            chkRight  
          dec            sprx      

chkRight  lda            joy2      
          and            #4        ; right
          bne            chkFire   
          inc            sprx      

chkFire   lda            joy2      
          and            #16       ; fire
          bne            next      
          rts
;         end check joystick          

next
          waitrt
          jmp            main_loop 

exit
          rts                      ; return to BASIC

movedata  ldx            #$0
@loop     lda            jetpac,x  
          sta            $0340,x   
          inx
          cpx            #$3f      
          bne            @loop
          rts

jetpac    bits           ..........BBBB..........
          bits           .........BBB............
          bits           .......B.BB.BBBB........
          bits           .......B.BBB.BBB........
          bits           .......B.BBB.BBB........
          bits           ......BB..BBBBB.........
          bits           ......BB................
          bits           ......B.B.BBBB..........
          bits           ......BBB.B..BB.B.......
          bits           ......B.B.B..BB.B.......
          bits           ......BBB.B....BBBBB....
          bits           ......B.BB.BBBB.........
          bits           ......BBBB.BBB..........
          bits           .......BBBB.BBBBBB......
          bits           .......B.B..BBBBBB......
          bits           ......B.B.B.....BB......
          bits           ......BBBBB.............
          bits           ................BBB.....
          bits           .......BB.B.....BBBB....
          bits           .......B..B.............
          bits           .....B..B...............</code></pre>
<a href="https://mscifu.files.wordpress.com/2017/04/sprite_jetpac.png"><img class="alignnone size-full wp-image-85" src="https://mscifu.files.wordpress.com/2017/04/sprite_jetpac.png" alt="" width="384" height="272" /></a>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2017-04-01 15:58:34</wp:post_date>
  <wp:post_date_gmt>2017-04-01 15:58:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sprites-en-movimiento</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521101051]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Disparos</title>
  <link>https://mscifu.wordpress.com/2017/04/01/disparos/</link>
  <pubDate>Sat, 01 Apr 2017 16:06:23 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=51</guid>
  <description/>
  <content:encoded><![CDATA[Con el jetpac volando, ahora vamos a agregar una funcion para que dispare un laser. La teoria es sencilla: en el loop incluimos un llamado a una subrutina, que si tiene seteado un flag predefinido va a animar un disparo. Cuando el jugador pulse el disparo ponemos un flag en 1, asi la rutina procede a hacer lo suyo. El disparo sera un sprite sencillo, con solamente una linea horizontal, pero con la particularidad que estará ensanchada en el eje X (para ello utilizaremos uno de los registros del VIC)
<h2>Algunos detalles</h2>
Basicamente agregamos un sprite <code>jetpacFire</code> que es solamente una linea horizontal (simulando un laser) al que expandimos al doble. Agregamos las variables de memoria que utilizaremos para manejar dicho sprite, ademas de una variable de estado que denominaremos <code>fire1</code> la que puede tener los siguientes estados:
<ul>
 	<li>0 = No pasa nada</li>
 	<li>1 = el usuario pulso disparo, entonces activo el sprite, lo posiciono en la pantalla y paso <code>fire1</code> a 2</li>
 	<li>2 = incremento la posicion X hasta que llegue al final de la pantalla (en realidad, hago un ADC, que es ADD con carry, si tengo desborde de acarreo entonces desactivo el sprite, y pongo <code>fire1</code> a 0)</li>
</ul>
Optimizé el codigo un poco, al principio van a ver que estan todas las direcciones de memoria que ire utilizando, luego las definiciones de macro, agregue una que es para mover los datos a la posicion de memoria deseada... no me gusta del todo, espero en proximas revisiones hacer algo mejor.
También agregue la subrutina <strong>animateFire</strong> que la llamo dentro del loop, que hace lo que explique previamente. Miren el codigo, esta bien comentado.
<h2>Codigo</h2>
<pre><code>*         = $c000

raster    = $d012
cborde    = $d020
cfondo    = $d021
spractive = $d015
sprxpandX = $d01d          

; direcciones jetpac 
sprcolor  = $d027
sprpoint  = $07f8
sprx      = $d000
spry      = $d001
joy2      = $dc00
fire1     = $02         ; zero page direccion sin usar

; direcciones disparo
sprcolorFire  = $d028
sprpointFire  = $07f9
sprxFire      = $d002
spryFire      = $d003

; -----------------------------------------------------------
; MACROS ----------------------------------------------------
; -----------------------------------------------------------
defm      waitrt
@loop     ldx            raster
          cpx            #$0       
          bne            @loop     
          endm

; movedata origen, destino 
defm      movedata 
          ldx            #$0       
@loop     lda            /1,x  
          sta            /2,x   
          inx
          cpx            #$3f      
          bne            @loop
          endm

; -----------------------------------------------------------
; MAIN CODE -------------------------------------------------
; -----------------------------------------------------------
main      lda            #$00      
          sta            cborde     
          sta            cfondo

; posicionamos jetpac
          ldx            #172       
          stx            sprx
          ldx            #139       
          stx            spry

; posicionamos disparo
          ldx            #196       
          stx            sprxFire
          ldx            #139       
          stx            spryFire

          lda            #$01      
          sta            spractive ;activamos el sprite 0 

          lda            #$01      
          sta            sprcolor  ; jetpac color blanco

          lda            #$07      
          sta            sprcolorFire; fire color amarillo

          lda            #$02      
          sta            sprxpandX ; expandimos X el disparo.

          lda            #$0d      
          sta            sprpoint  ; sprite 0 en $0340

          lda            #$0e 
          sta            sprpointFire  ; sprite 0 en $0380

          lda            #$0       ; fire flag 0      
          sta            fire1     

          movedata       jetpac,$0340
          movedata       jetpacFire,$0380

main_loop
          jsr            chkJoystick
          jsr            animateFire

          waitrt
          jmp            main_loop 

exit
          rts                      ; BASIC

; -----------------------------------------------------------
; SUBRUTINAS ------------------------------------------------
; -----------------------------------------------------------
chkJoystick
          lda            joy2      
          cmp            #127      
          beq            next      

          lda            joy2      
          and            #1        ; up
          bne            chkDown   
          dec            spry      

chkDown   lda            joy2      
          and            #2        ; down
          bne            chkLeft   
          inc            spry      

chkLeft   lda            joy2      
          and            #4        ; left
          bne            chkRight  
          dec            sprx      

chkRight  lda            joy2      
          and            #8        ; right
          bne            chkFire   
          inc            sprx      

chkFire   lda            joy2      
          and            #16       ; fire
          bne            next      

          ldx            fire1     
          cpx            #0        
          bne            next      ; checkeo si ya disparo

          lda            #1        ; setea status fire1 
          sta            fire1     
          lda            #$03      
          sta            spractive ;activamos el sprite 1 

;         end check joystick          

next
          rts
; -------------------------------------------

animateFire
          ldx            fire1     
          cpx            #$0       
          bne            @initFire
          rts                      ; vuelve si status fire es 0

@initFire
          ldx            fire1     
          cpx            #$1       
          bne            @loop     
; init fire (status 1)          
          ldx            spry
          stx            spryFire  

          lda            sprx      
          adc            #12
          sta            sprxFire
          inc            fire1     ; paso a status 2 (disparando)

@loop
          lda            #3        
          adc            sprxFire  ; incremento 3 x disparo
          sta            sprxFire  

          bcs            @setStatus0
          jmp            @next     

@setStatus0          
          ldx            #$0       ; si no seteo flag en 0
          stx            fire1     
          lda            #$01      
          sta            spractive ; desactivamos el sprite 1 

@next          
          rts

; -----------------------------------------------------------
; DATA  -----------------------------------------------------
; -----------------------------------------------------------
jetpac    bits           ..........BBBB..........
          bits           .........BBB............
          bits           .......B.BB.BBBB........
          bits           .......B.BBB.BBB........
          bits           .......B.BBB.BBB........
          bits           ......BB..BBBBB.........
          bits           ......BB................
          bits           ......B.B.BBBB..........
          bits           ......BBB.B..BB.B.......
          bits           ......B.B.B..BB.B.......
          bits           ......BBB.B....BBBBB....
          bits           ......B.BB.BBBB.........
          bits           ......BBBB.BBB..........
          bits           .......BBBB.BBBBBB......
          bits           .......B.B..BBBBBB......
          bits           ......B.B.B.....BB......
          bits           ......BBBBB.............
          bits           ................BBB.....
          bits           .......BB.B.....BBBB....
          bits           .......B..B.............
          bits           .....B..B...............

jetpacFire
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           B..B..BBBBBBBBBBBBBBBB.B
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................</code></pre>
&nbsp;

<a href="https://mscifu.files.wordpress.com/2017/04/jetpac_anim.gif"><img class="alignnone size-full wp-image-84" src="https://mscifu.files.wordpress.com/2017/04/jetpac_anim.gif" alt="" width="320" height="235" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2017-04-01 16:06:23</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:06:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>disparos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521317894]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Orden en el código</title>
  <link>https://mscifu.wordpress.com/2017/04/01/orden-en-el-codigo/</link>
  <pubDate>Sat, 01 Apr 2017 16:13:22 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=53</guid>
  <description/>
  <content:encoded><![CDATA[En este post vamos a organizar un poco el proyecto. Hasta ahora estabamos trabajando todo en un solo archivo, lo cual si bien es comodo al principio, en cuanto metemos un par de cositas se vuelve inmanejable.
Para ello vamos a separar el archivo en varios modulos. CBM Prg Studio nos permite fraccionar el codigo en distintos archivos, y luego especificar como estos archivos tienen que estar ordenados (al momento de compilar). Esto es necesario porque, por ejemplo, las definiciones de macros deben estar ANTES de ser invocadas.

Vamos a separar todo nuestro codigo en 6 archivos diferentes: <code>main.asm</code>, <code>macros.asm</code>, <code>vars.asm</code>, <code>sprites.asm</code>, <code>animatePlayer1.asm</code>, <code>animatePlayer1Fire.asm</code>. A medida que el proyecto crezca se iran agregando mas archivos. Los archivos vamos a ordenarlos de la siguiente manera (esta ventana es la de Project Properties):

<a href="https://mscifu.files.wordpress.com/2017/04/properties.jpg"><img class="alignnone size-full wp-image-88" src="https://mscifu.files.wordpress.com/2017/04/properties.jpg" alt="" width="571" height="286" /></a>

&nbsp;

En el frame 'Project Files (shown in build order)' tenemos que seleccionar 'use specific build order', asi de esa manera le decimos al compilador el orden correcto de los archivos.
<strong>Nótese</strong> que el primer archivo no es el <code>main.asm</code>, sino <code>sprites.asm</code>, y si observamos mas en detalle podemos ver que la columna 'Start' de dicho archivo dice '$840'. Ahi está especificando que el contenido de dicho archivo lo cargue en la posicion $840 de memoria. De esta manera nos evitamos las macros <code>movedata</code> y la duplicacion de datos (en las definiciones del sprite que luego copiabamos a una direccion accesible por el VIC II). Asi queda mas eficiente, mas bonito y nos ahorramos unos cuantos bytes.
<h2>Archivos</h2>
<strong>sprites.asm</strong>
<pre><code>*         = $0840
; dejamos 2 kbytes para la definicion de los sprites, ya quedan mapeados en un area de memoria que
; puede acceder el VIC II

jetpac    
          bits           ..........BBBB..........
          bits           .........BBB............
          bits           .......B.BB.BBBB........
          bits           .......B.BBB.BBB........
          bits           .......B.BBB.BBB........
          bits           ......BB..BBBBB.........
          bits           ......BB................
          bits           ......B.B.BBBB..........
          bits           ......BBB.B..BB.B.......
          bits           ......B.B.B..BB.B.......
          bits           ......BBB.B....BBBBB....
          bits           ......B.BB.BBBB.........
          bits           ......BBBB.BBB..........
          bits           .......BBBB.BBBBBB......
          bits           .......B.B..BBBBBB......
          bits           ......B.B.B.....BB......
          bits           ......BBBBB.............
          bits           ................BBB.....
          bits           .......BB.B.....BBBB....
          bits           .......B..B.............
          bits           .....B..B...............
          byte           0                          ; byte que se desperdicia

jetpacFire
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           B..B..BBBBBBBBBBBBBBBB.B
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................
          bits           ........................</code></pre>
<strong>Notese</strong> que al final de la definicion <code>jetpac</code> hay un byte, con valor 0, que no estaba antes. Esto es asi ya que el puntero de sprites del VIC accede de a 64 bytes, y el sprite necesita 63 bytes, por lo que necesariamente se va a desperdiciar 1 byte en cada sprite. Mas adelante veré si le puedo dar alguna utilidad (guardar algun estado, que se yo...)

<strong>vars.asm</strong>
<pre><code>raster    = $d012
cborde    = $d020
cfondo    = $d021
spractive = $d015
sprxpandX = $d01d          

; direcciones jetpac 
sprcolor  = $d027
sprpoint  = $07f8
sprx      = $d000
spry      = $d001
joy2      = $dc00
fire1     = $02         ; zero page direccion sin usar

; direcciones disparo
sprcolorFire  = $d028
sprpointFire  = $07f9
sprxFire      = $d002
spryFire      = $d003

skiprt    = $03         ; para pausar la ejecucion</code></pre>
<strong>Notese:</strong> agregamos una variable skiprt, con un valor arbitrario de $03. Esta variable se utiliza en una nueva rutina para controlar la velocidad de ejecucion. Anteriormente frenabamos la ejecucion en cada refresco de pantalla, lo cual era excesivamente lento. Ahora lo que hacemos es frenar cada 3 refrescos, con lo que aceleramos un poco el juego. Seguramente mas adelante quitaremos la macro <code>waitrt</code>, y la sustituiremos por una interrupcion, lo que seguramente es lo correcto de hacer. De momento <strong>es lo que hay...</strong>

<strong>macros.asm</strong>
<pre><code>defm      waitrt
          ldx            skiprt    
          cpx            #$00
          bne            @next     
          ldx            #$03      
          stx            skiprt    

@loop     ldx            raster
          cpx            #$0       
          bne            @loop     
@next     
          dec            skiprt    
          endm

defm      initVars
          lda            #$00      ; borde y fondo negro
          sta            cborde     
          sta            cfondo

          lda            #$03      ; inicializo skiprt (conteo hasta hacer un wait retrace)
          sta            skiprt

          ldx            #172      ; posicionamos jetpac
          stx            sprx
          ldx            #139       
          stx            spry

          ldx            #196      ; posicionamos disparo
          stx            sprxFire
          ldx            #139       
          stx            spryFire

          lda            #$01      
          sta            spractive ;activamos el sprite 0 

          lda            #$01      
          sta            sprcolor  ; jetpac color blanco

          lda            #$07      
          sta            sprcolorFire; fire color amarillo

          lda            #$02      
          sta            sprxpandX ; expandimos X el disparo.

          lda            #$21      
          sta            sprpoint  ; sprite 0 en $0840

          lda            #$22 
          sta            sprpointFire  ; sprite 0 en $0880

          lda            #$0       ; fire flag 0      
          sta            fire1     
          endm</code></pre>
<strong>main.asm</strong>
<pre><code>*         = $1000

          initVars

main_loop
          jsr            animatePlayer1
          jsr            animatePlayer1Fire

          waitrt
          jmp            main_loop 

exit
          rts                      ; BASIC</code></pre>
<strong>animatePlayer1.asm</strong>
<pre><code>animatePlayer1
          lda            joy2      
          cmp            #127      
          beq            next      

          lda            joy2      
          and            #1        ; up
          bne            chkDown   
          dec            spry      

chkDown   lda            joy2      
          and            #2        ; down
          bne            chkLeft   
          inc            spry      

chkLeft   lda            joy2      
          and            #4        ; left
          bne            chkRight  
          dec            sprx      

chkRight  lda            joy2      
          and            #8        ; right
          bne            chkFire   
          inc            sprx      

chkFire   lda            joy2      
          and            #16       ; fire
          bne            next      

          ldx            fire1     
          cpx            #0        
          bne            next      ; checkeo si ya disparo

          lda            #1        ; setea status fire1 
          sta            fire1     
          lda            #$03      
          sta            spractive ;activamos el sprite 1 

;         end check joystick          

next
          rts</code></pre>
<strong>animatePlayer1Fire.asm</strong>
<pre><code>animatePlayer1Fire
          ldx            fire1     
          cpx            #$0       
          bne            @initFire
          rts                      ; vuelve si status fire es 0

@initFire
          ldx            fire1     
          cpx            #$1       
          bne            @loop     
                                   ; init fire (status 1)          
          ldx            spry
          stx            spryFire  

          lda            sprx      
          adc            #12
          sta            sprxFire
          inc            fire1     ; paso a status 2 (disparando)

@loop
          lda            #1        
          adc            sprxFire  ; incremento 3 x disparo
          sta            sprxFire  

          bcs            @setStatus0
          jmp            @next     

@setStatus0          
          ldx            #$0       ; si no seteo flag en 0
          stx            fire1     
          lda            #$01      
          sta            spractive ; desactivamos el sprite 1 

@next          
          rts</code></pre>
Como es un bodrio poner todos estos archivos, a partir de ahora tengo todo subido a github, pueden clonarse el repo, y actualizar a medida que vamos avanzando con el juego:
<a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a>
En los próximos posts trataré de centrarme en el bloque de codigo que trabaje, y el resto se lo bajan de github.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2017-04-01 16:13:22</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:13:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>orden-en-el-codigo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521506509]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fondo del juego</title>
  <link>https://mscifu.wordpress.com/2017/04/01/fondo-del-juego/</link>
  <pubDate>Sat, 01 Apr 2017 16:20:22 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=55</guid>
  <description/>
  <content:encoded><![CDATA[Vamos a diseñar un fondo sencillo para nuestro juego, simulando algunas estrellas con los caracteres PETASCII, asi le vamos dando un marco al juego. Para ello utilizaremos una de las herramientas que nos provee el CBM PRG Studio para diseñar pantallas. Para ello vamos al menú <code>Tools</code>, y seleccionamos <code>Screen editor</code>:

<a href="https://mscifu.files.wordpress.com/2017/04/screen_editor.jpg"><img class="alignnone size-full wp-image-93" src="https://mscifu.files.wordpress.com/2017/04/screen_editor.jpg" alt="" width="540" height="234" /></a>

y se nos abrirá una ventana para editar una pantalla de C64.
<h2>El Editor</h2>
<a href="https://mscifu.files.wordpress.com/2017/04/screen_editor_2.jpg"><img class="alignnone size-full wp-image-94" src="https://mscifu.files.wordpress.com/2017/04/screen_editor_2.jpg" alt="" width="780" height="489" /></a>

Aquí tenemos 4 áreas bien separadas:

<strong>Área de trabajo:</strong> nuestra pantalla, una matriz de caracteres, de 40x25.
<strong>Character set (Caracteres):</strong> El set que utilizaremos para trabajar. La C64 tiene 2 sets de 128 caracteres, el primero solo con mayusculas y caracteres PETASCII, y el segundo incluyendo las minusculas, con un set reducido de caracteres graficos. Del caracter 128 en adelante se repite el set, pero invertido (esto es clickeando en <code>Reversed</code>). El caracter que tengamos seleccionado aqui es el que se utilizará con la opcion <code>Draw</code>, subopcion <code>Chars</code>, del siguiente área.
<strong>Mode:</strong> Aqui especificamos como queremos dibujar en la matriz de pantalla. Los modos son los siguientes:
<ul>
 	<li><code>Draw</code>: Modo dibujo, segun las opciones debajo que tengamos seleccionadas podremos dibujar con el caracter que tengamos seleccionado de <code>Character set</code>, o Lineas, o Cajas. Si seleccionamos cajas se nos habilita un boton para configurar la forma en que se crearan (ejemplo: si se hacen con un caracter seleccionado, o rellenas, o utilizando unos determinados PETASCII...). Si hacemos click con el boton izquierdo pinta, y si hacemos click con el derecho borra.</li>
 	<li><code>Select</code>: Al seleccionar un area se nos habilitará el menu <code>Selection</code>, tras lo cual podemos cortar, copiar, mover la seleccion, colorear, etc.</li>
 	<li><code>Re-colour</code>: Igual que Draw, pero aqui solo cambia el color de los caracteres sobre los que dibujemos.</li>
 	<li><code>Text</code>: Aqui podemos ingresar texto.</li>
 	<li><code>Path</code>: Podemos generar un path, y cuando queremos que lo 'pase a chars', vamos al menu 'Path' y seleccionamos 'convert to characters'. No le encontre demasiada utilidad a esta opcion... Tal vez ustedes...</li>
</ul>
<strong>Colours:</strong> Aqui especificamos el color con el que pintaremos. A fin de mantener la simpleza del tutorial nosotros diseñaremos una pantalla en modo 'Single colour' (los modos multicolores o extendido los dejare para bastante mas adelante... si llego...). Seleccionamos el color con que queremos pintar de la opcion <code>[11] Character colour</code> (las otras se utilizan en los demas modos, y la de background no tiene sentido especificarla.)
<h2>Mi pantalla de fondo</h2>
<a href="https://mscifu.files.wordpress.com/2017/04/fondo.png"><img class="alignnone size-full wp-image-92" src="https://mscifu.files.wordpress.com/2017/04/fondo.png" alt="" width="359" height="272" /></a>

Finalmente solo queda guardarla en un archivo, vamos a File, y seleccionamos 'Save'. Se nos guardara en el 'Project Explorer-&gt;Screen Designs'. En el próximo tutorial vamos a ver como exportar esta pantalla con sus colores, y como utilizarla en nuestro proyecto.

Como ya saben a esta altura el codigo del proyecto con lo que tenemos desarrollado hasta el momento lo pueden bajar desde Github:
<a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2017-04-01 16:20:22</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:20:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fondo-del-juego</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521706202]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Exportacion del fondo del juego</title>
  <link>https://mscifu.wordpress.com/2017/04/01/exportacion-del-fondo-del-juego/</link>
  <pubDate>Sat, 01 Apr 2017 16:22:45 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=57</guid>
  <description/>
  <content:encoded><![CDATA[Previamente diseñamos la pantalla de fondo de nuestro juego, ahora vamos a incorporarla. Para ello necesitaremos exportar la imagen como .asm, y luego una pequeña rutina que copie estos datos al area de memoria de la pantalla. El post de hoy sera corto, ya que es realmente sencillo lo que hay que hacer.
<h2>Exportación de datos</h2>
Primero, carguemos el fondo que diseñamos en el tuto anterior en el 'Screen editor', luego vamos a <code>File</code>, y seleccionamos <code>Export Assembler</code>, tras lo que aparecera la siguiente pantalla:

<a href="https://mscifu.files.wordpress.com/2017/04/export1.jpg"><img class="alignnone size-full wp-image-91" src="https://mscifu.files.wordpress.com/2017/04/export1.jpg" alt="" width="549" height="418" /></a>

dejamos las opciones como estan, ya que queremos la pantalla, asi como tambien los colores, y clickeamos en <code>ok</code>. Se abrirá una ventana con los datos exportados, los seleccionamos y copiamos, y los pegamos en un nuevo .asm que crearemos en nuestro proyecto. Para el fondo que yo hice me quedo algo asi:

<strong>screen.asm</strong>
<pre><code>*         = $2000
screen  BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$0A,$05,$14,$10,$01,$03,$20
        BYTE    $20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$17,$01,$12,$13,$21,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$51,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$74,$0A,$10,$20,$31,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$08,$09,$14,$20,$20,$31,$30
        BYTE    $20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$06,$15,$05,$0C,$20,$39,$39
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$0A,$10,$20,$32,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$08,$09,$14,$20,$20,$31,$35
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$74,$06,$15,$05,$0C,$20,$32,$35
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$E9,$DF,$20,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$E9,$A0,$A0,$DF,$20,$20,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$E9,$A0,$A0,$A0,$A0,$DF,$20,$20,$20,$20,$20,$2E,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$E9,$A0,$A0,$A0,$A0,$A0,$A0,$DF,$20,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2E,$20,$20,$20,$20,$20,$20,$E9,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$DF,$20,$20,$20,$20,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$E9,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$DF,$68,$68,$68,$74,$02,$19,$20,$20,$20,$20,$20
        BYTE    $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$74,$20,$20,$20,$20,$20,$20,$20
        BYTE    $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$74,$0D,$13,$03,$09,$06,$15,$20
        BYTE    $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$74,$20,$20,$20,$20,$20,$20,$20</code></pre>
<strong>screen_colour.asm</strong>
<pre><code>*         = $2400
colour  BYTE    $03,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$07,$0C,$0C,$0C,$0C,$0C,$0C,$0C
        BYTE    $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$07,$05,$05,$05,$03,$03,$03,$0C
        BYTE    $03,$03,$01,$03,$03,$03,$03,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$0C,$0A,$0A,$0A,$0A,$0A,$0C
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0B,$0B,$0B,$0B,$0B,$01,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$01,$0B,$0B,$07,$0C,$0C,$01,$0F,$0F,$01,$0C
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$01,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$01,$0B,$0B,$0B,$0B,$0B,$07,$05,$05,$05,$05,$05,$05,$05
        BYTE    $05,$05,$03,$03,$03,$03,$03,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$05,$05,$05,$01,$05,$05,$05
        BYTE    $03,$0B,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$05,$05,$05,$05,$01,$05,$05
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$05,$05,$05,$05,$05,$05,$05
        BYTE    $03,$03,$03,$03,$03,$01,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$01,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$03,$03,$03,$03,$03,$03,$03
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$01,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$01,$0C,$0C,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$07,$03,$03,$03,$03,$03,$03,$03
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$07,$03,$03,$03,$03,$03,$03,$03
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$0B,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$0B,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0B,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $03,$03,$03,$03,$03,$03,$03,$0B,$0C,$0C,$0C,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$07,$01,$01,$01,$01,$01,$01,$01
        BYTE    $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$07,$07,$0C,$0C,$0C,$0C,$0C
        BYTE    $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$07,$0C,$0C,$0C,$0C,$0C,$0C,$0C
        BYTE    $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$07,$07,$07,$07,$07,$07,$07,$0C
        BYTE    $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$07,$0C,$0C,$0C,$0C,$0C,$0C,$0C</code></pre>
En <code>Project properties</code>, en la parte de <strong>build order</strong> ubiquemoslos al final de todos, primero screen y luego screen_colour.

Solo queda agregar una pequeña macro que copie estos dos bloques de codigo a sus correspondientes direcciones (pantalla y color), como la siguiente (agregar al archivo <code>macros.asm</code>):
<pre><code>defm      copyScreen
          ldx            #$00      
@loop          
          lda            screen,x  
          sta            scrPtr,x  

          lda            screen + $100,x  
          sta            scrPtr + $100,x  

          lda            screen + $200,x  
          sta            scrPtr + $200,x  

          lda            screen + $300,x  
          sta            scrPtr + $300,x  

          lda            colour,x  
          sta            scrColPtr,x

          lda            colour + $100,x  
          sta            scrColPtr + $100,x

          lda            colour + $200,x  
          sta            scrColPtr + $200,x

          lda            colour + $300,x  
          sta            scrColPtr + $300,x

          inx
          cpx            #$00       
          bne            @loop     
          endm</code></pre>
e invocamos <code>copyScreen</code> en <code>main.asm</code>
<pre><code>*         = $1000

; no cambiar el orden de estas llamadas!
; (copyScreen pisa la inicializacion de los punteros de sprites)
          copyScreen
          initVars

main_loop
          jsr            animatePlayer1
          jsr            animatePlayer1Fire

          waitrt
          jmp            main_loop 

exit
          rts                      ; BASIC</code></pre>
Como ya saben a esta altura el codigo del proyecto con lo que tenemos desarrollado hasta el momento lo pueden bajar desde Github:
<a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2017-04-01 16:22:45</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:22:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exportacion-del-fondo-del-juego</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521770077]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Animacion Sprites</title>
  <link>https://mscifu.wordpress.com/2017/04/01/animacion-sprites/</link>
  <pubDate>Sat, 01 Apr 2017 16:25:01 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=59</guid>
  <description/>
  <content:encoded><![CDATA[<p>Retomamos el codigo para esta vez comenzar a animar nuestro personaje... Hoy empiezo mostrando todo lo que hice en un video, y despues vamos con el codigo y las complicaciones, de paso vemos un poco de teoria que tuve que aprender.</p>
[youtube https://www.youtube.com/watch?v=78inGhpuSUs&amp;w=560&amp;h=315]
<p>Como podemos ver, ahora nuestro personaje hace bastante mas cosas. En principio el grafico 'gira' para el lado que se mueve, lo que obligó a modificar la rutina de disparo para que, segun para donde este mirando nuestro personaje, salga el laser.<br />
Ademas hay gravedad, o algo parecido... ahora si pulsamos para arriba nos 'impulsamos', y si soltamos la gravedad nos tira para abajo hasta tocar el piso.<br />
Como nuestro personaje no puede caminar... bah, no tengo ganas de hacer tooooda la animacion de las patitas... lo resolvi muuuy simple: si estas tocando el piso NO TE PODES MOVER.<br />
La idea detras de esto es la siguiente:  </p>
<ul>
<li>Solo te podes mover si volas con el jetpac</li>
<li>Solo podes volar si tenes combustible</li>
<li>Si te quedas sin combustible quedas anclado en el piso (y seras masacrado horriblemente por tu competidor)</li>
<li>Podes recargar mas combustible con celdas de combustible que cae del cielo (y podes dispararle a las celdas para evitar que tu competidor agarre combustible)</li>
<li>Hablando de disparos: cada tiro que disparas te quita una unidad de energia (para no ponerte a disparar como loco)</li>
<li>Cada tiro que te ponen te resta 30 unidades de energia</li>
<li>Cada vez que volas perdes energia (no tanto como si te pusieran un tiro, pero perdes)... todavia a definir</li>
</ul>
<p>O sea: perdes energia por cualquier cosa, y tenes que pelear por recuperarla.<br />
De todo eso solo tengo implementado el primer punto, los restantes los ire implementando mas adelante.</p>
<h2>Ahora ¡El codigo!</h2>
<p>Lo primero que explicaré es como hice la animacion del jetpac (que mire para donde se está moviendo). Es super sencillo, abrí el archivo <strong>sprites.asm</strong> y  definí un grafico identico al que habia realizado previamente, pero lo puse en espejo. Lo puse un label con nombre <code>jetpacLeft</code>, a continuacion de la definicion del disparo. Codigo a continuación:</p>
<pre><code>jetpacLeft
          bits           ..........BBBB..........
          bits           ............BBB.........
          bits           ........BBBB.BB.B.......
          bits           ........BBBB.BB.B.......
          bits           ........BBBB.BB.B.......
          bits           .........BBBBB..BB......    
          bits           ................BB......
          bits           ..........BBBB.B.B......
          bits           .......B.BB..B.BBB......
          bits           .......B.BB..B.B.B......
          bits           ....BBBBB....B.BBB......
          bits           .........BBBB.BB.B......
          bits           ..........BBB.BBBB......
          bits           ......BBBBBB.BBBB.......
          bits           ......BBBBBB..B.B.......
          bits           ......BB.....B.B.B......
          bits           .............BBBBB......
          bits           .....BBB................
          bits           ....BBBB.....B.BB.......
          bits           .............B..B.......
          bits           ...............B..B.....
          byte           0</code></pre>
<p>Luego agregue unas variables en <code>vars.asm</code> (en realidad las uso como constantes, pero bue... todo lo que definimos aca son punteros o constantes):</p>
<pre><code>; constantes
gravity   = $05   ; usado para setear la 'fuerza' de la gravedad, 1 = super fuerte, mayor = mas debil
floorPosition = 223
topPosition = 52

ptrJPLeft = $23
ptrJPRight = $21
ptrJPFire = $22
; dirFire esta en la direccion de memoria que me sobra del sprite de disparo... mhmm          </code></pre>
<p>ademas de una de nombre <strong>dirFire</strong>, que es el ultimo byte del sprite <strong>ptrJPRight</strong>, asi lo aprovechamos para algo (puse ese comentario con las demas variables porque me paso que no me acordaba donde la habia definido... si... es medio una cochinada, pero solo tengo 65535 espacios libres de memoria... y ni siquiera eso).<br />
Las variables <code>ptrJPLeft</code> y <code>ptrJPRight</code> guardan el puntero de la ubicacion de los sprites. Podria haber utilizado los numeros, pero el codigo queda mucho mas claro asi.  Estas vars/const (llamenlas como quieran) las utilizo en <code>animatePlayer1.asm</code>. A continuacion un codigo de ejemplo (no es el codigo exactamente, borre un pedacito para clarificar):</p>
<pre><code>chkLeft   lda            joy2      
          and            #4         ; checkeo si es left
          bne            chkRight   ; si no voy a checkear right
                                    ; y si es left, sigo por aca
          lda            #ptrJPLeft ; cargo en a el valor de ptrJPLeft ($23)     
          sta            sprpoint   ; y lo establezco en el puntero del jetpac
          dec            sprx       ; y todo lo demas... .</code></pre>
<p>Lo mismo para right, o sea, en cada cambio derecha/izquierda lo unico que hago es cambiar un numerito en el puntero del sprite del jetpac1. De la misma forma, si quisieramos hacer que camine, o que expulse fuego por el jetpac cuando vuela lo que deberemos hacer es armar un contador, que se incremente cada <em>n</em> frames, que segun el numero que establezca el puntero del frame correspondiente... es laborioso, pero no imposible.</p>
<p><strong>Un detalle que tuve que cambiar</strong> fue el tema de los disparos. Antes siempre miraba hacia la derecha, por lo que la rutina de disparos era tan elemental como que cuando detectaba el boton de disparo procedia a:</p>
<ul>
<li>tomar la posicion x e y del jugador, establecia la posicion x e y del disparo, y pasaba el status a <em>disparando</em>.</li>
<li>mientras estaba <em>disparando</em> en cada frame avanzaba 3 pixeles, y chequeaba que no haya llegado al final de la pantalla (si x es MAYOR o IGUAL que una determinada posicion - esto tiene profundas implicancias mas adelante).</li>
<li>si llegaba al final de la pantalla procedia a apagar el sprite de disparo, y pasaba a estado <em>esperando</em>.</li>
</ul>
<p>Ahora tengo que tener en cuenta ademas para adonde esta mirando, e inicializar una variable <code>dirFire</code> para mas adelante, cuando este en status <em>disparando</em>, decremente o incremente la posicion del disparo. </p>
<p>Anteriormente dije que chequeaba si el disparo habia finalizado cuando llegaba al final de la pantalla, o sea a una posicion x MAYOR o IGUAL a un punto arbitrario. En assembler no es tan trivial como en cualquier otro lenguaje hacer una comparacion por mayor o igual (hay que hacer una operacion, y ver si ademas tenemos acarreo). Eso se hace cargando en A la posicion x del sprite, luego hacemos un <code>ADC</code>, que es una operacion para sumar, pero con acarreo, ponemos el resultado de la suma en la posicion x del sprite, y con <code>BCS</code> (Branch on Carry Set) saltamos a status0 si se produjo un acarreo (o sea la suma excedio 255). Codigo de ejemplo donde hago eso: </p>
<pre><code>        lda            sprxFire  
        clc             ; seteamos el flag de acarreo en 0
        adc            #$02 ; cantidad de pixels que aumenta
        sta            sprxFire  
        bcs            @setStatus0        </code></pre>
<p>Diferente es cuando en vez de sumar tenemos que restar. Hacemos exactamente lo mismo, pero con unas salvedades:</p>
<ul>
<li>en vez de ADC usamos SBC, que a diferencia de ADC, BORRA el flag de acarreo cuando se excede el valor de una resta (o sea, da menos que cero). Eso nos lleva a ...</li>
<li>en vez de CLC usamos SEC, que ESTABLECE el flag de acarreo, para finalmente chequear con </li>
<li><code>BCC</code> (Branch on Carry Clear), lo mismo que el otro, pero cuando borra el Carry.</li>
</ul>
<p>esta boludez me tuvo una semana, todo por no leer la puta documentacion. Quedais avisaos... </p>
<p><strong>Otro detalle </strong> que agregue fue la gravedad y los limites superiores e inferiores. Para la gravedad agregue dos constantes <code>gravity</code>, que es el valor inicial del contador, y <code>gravityCounter</code>, que es el contador de gravedad. Al final de cada frame decremento gravityCounter y me fijo llego a cero. Si no llego a cero decremento el contador en 1, y si es igual a cero decremento la posicion Y del sprite e inicializo el gravityCounter con el valor de gravity. </p>
<pre><code>next
          ldx            gravityCounter
          dex
          stx            gravityCounter
          cpx            #$0       
          bne            @exit

          jsr            checkFloorP1

          cpx            #1      ; check floor (si result checkFloorP1 es 1 es el piso)
          beq            @skipGravity

          inc            spry      ; gravity :P 

@skipGravity
          ldx            #gravity
          stx            gravityCounter</code></pre>
<p>Pueden ver ademas que hago una llamada a una subrutina de nombre <code>checkFloorP1</code>. Esta rutina checkea que si el jugador llego al piso, y establece el registro x con 1 o 0, comparamos x con 1 o 0 (true o false, seria) y procedemos... a continuacion la rutina para checkear si llego al piso (y de paso la rutina para chequear el techo, de regalo).</p>
<pre><code>; verifica posicion Y de P1, y retorna 1 en X si es el piso 
checkFloorP1
          ldx            spry      
          cpx            #floorPosition
          beq            @returnTrue    ; is equal
          bcs            @returnTrue    ; or greater ;) 
          ldx            #0        
          rts
@returnTrue
          ldx            #1        
          rts

; verifica posicion Y de P1, y retorna 1 en X si es el top
checkTopP1
          ldx            spry      
          cpx            #topPosition
          beq            @returnTrue    ; is equal
          ;bcs            @returnTrue    ; or greater ;) 
          ldx            #0        
          rts
@returnTrue
          ldx            #1        
          rts</code></pre>
<p>A partir de ahora no voy a poner tanto codigo ya que ademas de codigo nuevo voy corrigiendo el codigo que escribi previamente, o hago alguna modificacion de ultimo momento, asi que  prefiero explicar lo que hice, tratando de entenderlo uds y yo, y pueden ir bajando desde Github lo que tengo realizado hasta el momento:
<a href="https://github.com/moonorongo/jp_wars.git"><a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a></a> </p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>59</wp:post_id>
  <wp:post_date>2017-04-01 16:25:01</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:25:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>animacion-sprites</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3521829190]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Animacion Sprites Player 2</title>
  <link>https://mscifu.wordpress.com/2017/04/01/animacion-sprites-player-2/</link>
  <pubDate>Sat, 01 Apr 2017 16:36:49 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=61</guid>
  <description/>
  <content:encoded><![CDATA[<p>La entrada de hoy es corta, ya que a pesar que vamos a agregar un segundo jugador, lo unico que vamos a hacer es duplicar las variables, duplicar un par de archivos, agregar unas llamadas en el main.asm y... voila!!! tenemos el segundo jugador funcionando!!! magia... no, en realidad, son las ventajas de separar el codigo en archivos. A continuacion, un video de lo que me quedo:</p>
[youtube https://www.youtube.com/watch?v=1WsMkXZsI0Y&w=854&h=480]
<p>Para lograr ello, lo primero que tenemos que hacer es duplicar las etiquetas que utilizamos para el jugador 1. por ejemplo: </p>
<h3>agregados en vars.asm</h3>
<pre><code>; direcciones jetpac 2 -------------------------------------------------------
sprcolor2  = $d029
sprpoint2  = $07fa
sprx2      = $d004
spry2      = $d005
fire2     = $2a                   ; zero page direccion sin usar
gravityCounter2 = $04

; direcciones disparo
sprcolorFire2  = $d02a
sprpointFire2  = $07fb
sprxFire2      = $d006
spryFire2  = $d007
; dirFire2 esta en la direccion de memoria que me sobra del jet pac right</code></pre>
<p>Tambien tenemos que inicializar estas variables, para ello agregamos en el archivo <code>macros.asm</code> (en la macro initVars) lo siguiente:</p>
<pre><code>          ldx            #150      ; posicionamos jetpac 2
          stx            sprx2
          ldx            #139       
          stx            spry2

          ldx            #196      ; posicionamos disparo 2
          stx            sprxFire2
          ldx            #139       
          stx            spryFire2

          lda            #$05      
          sta            spractive ;activamos el sprite 0 y 2

          lda            #$03
          sta            sprcolor2  ; jetpac 2 color cyan

          lda            #$0a
          sta            sprcolorFire2  ; fire color red

          lda            #$0a      
          sta            sprxpandX ; expandimos X el disparo 1 y 2.

          lda            #ptrJPLeft
          sta            sprpoint2  ; jet pac 1 mirando a la izquierda

          lda            #ptrJPFire      
          sta            sprpointFire2  ; punteros de disparo

          lda            #$0       ; fire flag 
          sta            fire2     

          lda            #gravity
          sta            gravityCounter2</code></pre>
<p>y tenemos que duplicar animatePlayer2.asm y animatePlayer2Fire.asm, vamos a <code>Project properties</code> y en el build order los ubicamos a continuacion de los del Player 1.
Ademas tenemos que modificar todas las referencias a las variables del player 1, a las nuevas variables.</p>
<h2>Un agregado mas</h2>
<p>Por ultimo, un detalle que me viene rompiendo las bolas desde que comence a programar... siempre que cargamos un prg en la c64 tenemos que ejecutarlo con SYS 4096... para ahorrarnos ese paso agregamos una llamada sys, que la generamos con una herramienta de CBM PRG Studio.
Agregamos un nuevo archivo asm, que lo nombraremos como syscall.asm. Luego vamos a Tools -&gt; Generate SYS() Call, se nos abrira un popup, en <code>Enter start addres</code> ponemos $0801, hacemos click en ok, y nos generará algo como esto:</p>
<pre><code>; 10 SYS4096

*=$0801

        BYTE    $0B, $08, $0A, $00, $9E, $34, $30, $39, $36, $00, $00, $00</code></pre>
<p><strong>Nota:</strong> El popup nos da 2 opciones para seleccionar, basicamente si queremos que la linea aparezca de una forma u otra... pero no se como sabe el programa que la direccion es esa (4096)... supongo que la saca del main.asm... pero creo que en ningun lado estoy poniendo que ese es el archivo principal, o lo que sea... en fin...</p>
<p>A partir de ahora no voy a poner tanto codigo ya que ademas de codigo nuevo voy corrigiendo el codigo que escribi previamente, o hago alguna modificacion de ultimo momento, asi que  prefiero explicar lo que hice, tratando de entenderlo uds y yo, y pueden ir bajando desde Github lo que tengo realizado hasta el momento:
<a href="https://github.com/moonorongo/jp_wars.git"><a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a></a> </p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2017-04-01 16:36:49</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:36:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>animacion-sprites-player-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3522139038]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Colisiones</title>
  <link>https://mscifu.wordpress.com/2017/04/01/colisiones/</link>
  <pubDate>Sat, 01 Apr 2017 16:39:16 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=63</guid>
  <description/>
  <content:encoded><![CDATA[<p>Hoy vamos a explicar como se detectan las colisiones utilizando el VIC II. Estuve un rato para entender como era, pero finalmente lo pude hacer.<br />
Basicamente hay 2 formas de detectar colisiones: una es viendo si los sprites que nos interesan estan colisionando (haciendo un polling), y la otra es utilizando interrupciones. Como la segunda opcion queda fuera de mi conocimiento (de momento) voy a explicar la primera.</p>
<h2>El código (simplificado)</h2>
<pre><code>detectCollision
        ; detecto que ocurrio una colision de sprites
          lda            $d019    ; Direccion que indica en bit 2 que ocurrio una colision
          and            #$04     ; MASK bit 2
          cmp            #$04     ; testeo si bit 2 esta encendido
          bne            @skipSprDetect ; si NO sigo de largo

        ; SI OCURRIO UNA COLISION
          lda            $d01e    ; Direccion que indica cuales colisionaron 
          and            #JP2 + FJP1 ; mascara con los que quiero testear (2 + 4 = 6)
          cmp            #JP2 + FJP1 ; testeo si estan encendidos los 2
          bne            @skipSprDetect  ; si no, que siga de largo

        ; SI LLEGA ACA = COLISIONARON DISPARO jugador 1  CONTRA jugador 2
          ; aca hago todo lo que quiera: incremento puntaje, 
          ; resto energia... 
          ; animo el sprite impactado... 

          jmp            @skipSprDetect

@skipSprDetect
          rts</code></pre>
<p>Vamos a trabajar con 2 registros: $d019, que indica que ocurrio una colision sprite-sprite, y $d01e, que indica cuales colisionaron.<br />
Aca el tema es que, cuando quise fijarme directamente en la direccion $d01e (registro de colision de sprites-sprites), no funcionaba. Eso ocurria porque ese registro se llena cuando ocurre una colision, y eso hay que detectarlo con el registro $d019, concretamente el bit 2. Si tenemos colision, entonces RECIEN podemos ver cuales colisionaron.<br />
Un detalle que lei en la documentacion es que el registro se limpia cuando se lee... o sea, que si queremos chequear varios sprites tenemos que cargar el valor del registro y guardalo de alguna forma (ya sea en memoria, en el stack... donde se nos ocurra).</p>
<p>El codigo simplificado esta comentado, se entiende muy facil, NO ES EL CODIGO final que subi al repositorio, ya que ese codigo hace varias cositas mas:</p>
<ul>
<li>detecta colisiones fire1 y spr2 </li>
<li>fire2 y spr1</li>
<li>registra el impacto en un contador</li>
<li>muestra la cantidad de hits de ambos players</li>
<li>hace una pequeña animacion...</li>
</ul>
<p>Pero como tengo idea de implementar maquinas de estado en ambos players (mas adelante explico que es), decidi explicar mas teoricamente esto de las colisiones, y luego de hacer las maquinas de estado poner todo mas completo.</p>
<p>A partir de ahora no voy a poner tanto codigo ya que ademas de codigo nuevo voy corrigiendo el codigo que escribi previamente, o hago alguna modificacion de ultimo momento, asi que  prefiero explicar lo que hice, tratando de entenderlo uds y yo, y pueden ir bajando desde Github lo que tengo realizado hasta el momento:
<a href="https://github.com/moonorongo/jp_wars.git"><a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a></a> </p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>63</wp:post_id>
  <wp:post_date>2017-04-01 16:39:16</wp:post_date>
  <wp:post_date_gmt>2017-04-01 16:39:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>colisiones</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3522204369]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>configuracion_ide</title>
  <link>https://mscifu.wordpress.com/2017/04/01/hello_world/configuracion_ide/</link>
  <pubDate>Sat, 01 Apr 2017 22:30:10 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/configuracion_ide.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>66</wp:post_id>
  <wp:post_date>2017-04-01 22:30:10</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:30:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>configuracion_ide</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>26</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/configuracion_ide.png</wp:attachment_url>
</item>
<item>
  <title>primer_pantalla_proyecto</title>
  <link>https://mscifu.wordpress.com/2017/04/01/hello_world/primer_pantalla_proyecto/</link>
  <pubDate>Sat, 01 Apr 2017 22:32:03 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/primer_pantalla_proyecto.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2017-04-01 22:32:03</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:32:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>primer_pantalla_proyecto</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>26</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/primer_pantalla_proyecto.png</wp:attachment_url>
</item>
<item>
  <title>build_run_button</title>
  <link>https://mscifu.wordpress.com/2017/04/01/hello_world/build_run_button/</link>
  <pubDate>Sat, 01 Apr 2017 22:33:25 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/build_run_button.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>68</wp:post_id>
  <wp:post_date>2017-04-01 22:33:25</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:33:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>build_run_button</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>26</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/build_run_button.png</wp:attachment_url>
</item>
<item>
  <title>result</title>
  <link>https://mscifu.wordpress.com/2017/04/01/hello_world/result/</link>
  <pubDate>Sat, 01 Apr 2017 22:35:18 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/result.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>69</wp:post_id>
  <wp:post_date>2017-04-01 22:35:18</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:35:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>result</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>26</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/result.png</wp:attachment_url>
</item>
<item>
  <title>captura</title>
  <link>https://mscifu.wordpress.com/2017/04/01/flashing_border/captura/</link>
  <pubDate>Sat, 01 Apr 2017 22:44:49 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/captura.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2017-04-01 22:44:49</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:44:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>captura</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>42</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/captura.png</wp:attachment_url>
</item>
<item>
  <title>captura2</title>
  <link>https://mscifu.wordpress.com/2017/04/01/flashing_border/captura2/</link>
  <pubDate>Sat, 01 Apr 2017 22:45:27 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/captura2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2017-04-01 22:45:27</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:45:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>captura2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>42</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/captura2.png</wp:attachment_url>
</item>
<item>
  <title>captura3</title>
  <link>https://mscifu.wordpress.com/2017/04/01/flashing_border/captura3/</link>
  <pubDate>Sat, 01 Apr 2017 22:46:09 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/captura3.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2017-04-01 22:46:09</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:46:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>captura3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>42</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/captura3.png</wp:attachment_url>
</item>
<item>
  <title>raster_bar</title>
  <link>https://mscifu.wordpress.com/2017/04/01/macros/raster_bar/</link>
  <pubDate>Sat, 01 Apr 2017 22:50:33 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/raster_bar.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2017-04-01 22:50:33</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:50:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>raster_bar</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>44</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/raster_bar.png</wp:attachment_url>
</item>
<item>
  <title>sprite_pacman</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites/sprite_pacman/</link>
  <pubDate>Sat, 01 Apr 2017 22:58:44 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/sprite_pacman.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>79</wp:post_id>
  <wp:post_date>2017-04-01 22:58:44</wp:post_date>
  <wp:post_date_gmt>2017-04-01 22:58:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sprite_pacman</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>46</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/sprite_pacman.png</wp:attachment_url>
</item>
<item>
  <title>final</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites/final/</link>
  <pubDate>Sat, 01 Apr 2017 23:00:08 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/final.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2017-04-01 23:00:08</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:00:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>final</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>46</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/final.png</wp:attachment_url>
</item>
<item>
  <title>final2</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites/final2/</link>
  <pubDate>Sat, 01 Apr 2017 23:00:09 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/final2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2017-04-01 23:00:09</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:00:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>final2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>46</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/final2.png</wp:attachment_url>
</item>
<item>
  <title>jetpac_anim</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites-en-movimiento/jetpac_anim/</link>
  <pubDate>Sat, 01 Apr 2017 23:04:14 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/jetpac_anim.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>84</wp:post_id>
  <wp:post_date>2017-04-01 23:04:14</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:04:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>jetpac_anim</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>49</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/jetpac_anim.gif</wp:attachment_url>
</item>
<item>
  <title>sprite_jetpac</title>
  <link>https://mscifu.wordpress.com/2017/04/01/sprites-en-movimiento/sprite_jetpac/</link>
  <pubDate>Sat, 01 Apr 2017 23:04:14 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/sprite_jetpac.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2017-04-01 23:04:14</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:04:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sprite_jetpac</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>49</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/sprite_jetpac.png</wp:attachment_url>
</item>
<item>
  <title>properties</title>
  <link>https://mscifu.wordpress.com/2017/04/01/orden-en-el-codigo/properties/</link>
  <pubDate>Sat, 01 Apr 2017 23:09:22 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/properties.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>88</wp:post_id>
  <wp:post_date>2017-04-01 23:09:22</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:09:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>properties</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>53</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/properties.jpg</wp:attachment_url>
</item>
<item>
  <title>export1</title>
  <link>https://mscifu.wordpress.com/2017/04/01/fondo-del-juego/export1/</link>
  <pubDate>Sat, 01 Apr 2017 23:11:29 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/export1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>91</wp:post_id>
  <wp:post_date>2017-04-01 23:11:29</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:11:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>export1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/export1.jpg</wp:attachment_url>
</item>
<item>
  <title>fondo</title>
  <link>https://mscifu.wordpress.com/2017/04/01/fondo-del-juego/fondo/</link>
  <pubDate>Sat, 01 Apr 2017 23:11:30 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/fondo.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2017-04-01 23:11:30</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:11:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fondo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/fondo.png</wp:attachment_url>
</item>
<item>
  <title>screen_editor</title>
  <link>https://mscifu.wordpress.com/2017/04/01/fondo-del-juego/screen_editor/</link>
  <pubDate>Sat, 01 Apr 2017 23:11:32 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/screen_editor.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>93</wp:post_id>
  <wp:post_date>2017-04-01 23:11:32</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:11:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen_editor</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/screen_editor.jpg</wp:attachment_url>
</item>
<item>
  <title>screen_editor_2</title>
  <link>https://mscifu.wordpress.com/2017/04/01/fondo-del-juego/screen_editor_2/</link>
  <pubDate>Sat, 01 Apr 2017 23:11:35 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">http://mscifu.files.wordpress.com/2017/04/screen_editor_2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>94</wp:post_id>
  <wp:post_date>2017-04-01 23:11:35</wp:post_date>
  <wp:post_date_gmt>2017-04-01 23:11:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen_editor_2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>55</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://mscifu.files.wordpress.com/2017/04/screen_editor_2.jpg</wp:attachment_url>
</item>
<item>
  <title>Maquinas de estados</title>
  <link>https://mscifu.wordpress.com/2017/04/06/maquinas-de-estados/</link>
  <pubDate>Thu, 06 Apr 2017 20:45:33 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?p=98</guid>
  <description/>
  <content:encoded><![CDATA[En la entrada de hoy voy a explicar el concepto de 'maquina de estado' (no se si se llama asi, pero asi lo aprendi yo). Basicamente  es separar el codigo en diferentes 'bloques' que se ejecutaran segun un numero de estado. Para el caso que nos compete, que son los jugadores, vamos a diferenciar el estado de los mismos en 4:
<ul>
 	<li><strong>STATUS 0:</strong> Inicializacion del jugador</li>
 	<li><strong>STATUS 1:</strong> Animacion de entrada: una pequeña animacion, durante la cual el jugador es inmune a los disparos (si no otro jugador lo suficientemente habilidoso directamente no lo dejaria jugar)</li>
 	<li><strong>STATUS 2:</strong> El codigo de deteccion de movimientos, etc (todo lo que estaba hasta ahora)</li>
 	<li><strong>STATUS 3:</strong> Animacion de muerte del jugador</li>
</ul>
Entonces, si yo tengo una variable <em>statusJP</em>, en base al valor de la misma voy a ejecutar un codigo u otro. Esto en C seria algo asi:
<pre><code>
  switch(statusJP1) {
    case 0 : // inicializacion de todas las vars de jugador 1
        statusJP = 1;
        break;
    case 1 : // animacion entrada
             if (condicion_terminacion_animacion_entrada) {
               statusJP = 2;
             }
             break;
    case 2 : // estado normal de juego
             .
             .
             .
             .
             break;
    case 3 : // muerto
             // animacion muerte 
             // y lo que necesitemos
             if (termino_animacion_muerte) {
               statusJP = 0;
             }
             break;
  }
  
</code></pre>
En assembler es un un poquito mas complicado, ya que no disponemos de la instruccion switch. Aqui muestro el codigo del player 2 (lo limpie un poco, para que no quede kilometrico - el codigo original esta en el repositorio).
<pre><code>
animatePlayer2
                                   ; -------------- STATUS 0 -------
          ldx            statusJP2 
          cpx            #0
          bne            @statusJP2_1
                                   ; INIT SPRITE JP2
          ldx            #233      ; posicionamos jetpac 2
          stx            sprx2
          ldx            #0        ; que salga desde arriba de la pantalla...
          stx            spry2     
          lda            #ptrJPLeft      
          sta            sprpoint2  ; jet pac 2 mirando a la izquierda
                        
          ldx            #1        
          stx            statusJP2 
          
@statusJP2_1                       ; -------------- STATUS 1 -----------------
                                   
          ldx            statusJP2 
          cpx            #1        
          bne            @statusJP2_2
          
          inc            spry2      
          ldy            spry2      
          cpy            #50       
          beq            @set_statusJP2_2
          
          jmp            @exit     
          
@set_statusJP2_2
          ldx            #2
          stx            statusJP2
          
          
@statusJP2_2                       ; -------------- STATUS 2 -----------------------
                                   ; todo el codigo que estaba antes va aqui...
          
          
@statusJP2_3                       ; --------------- STATUS 3 -----------------
             
          ldx            gravityCounter2
          dex
          stx            gravityCounter2
          cpx            #$0       
          bne            @exit
          ldx            #gravity
          stx            gravityCounter2

          inc            fallCounter2
          lda            spry2
          adc            fallCounter2
          sta            spry2
          
          ldx            sprpoint
          cpx            #ptrJPRight  ; si esta mirando a la derecha
          bne            @decxspr2    ; decrementa sprx
         
          lda            sprx2
          adc            fallCounter2  ; si mira a la izq incrementa
          sta            sprx2      
          jmp            @chkFloor  
          
@decxspr2 
          lda            sprx2     
          sbc            fallCounter2
          sta            sprx2      
          
          
@chkFloor
          jsr            checkFloorP2
          cpx            #1        
          bne            @exit
          
          ldx            #0      
          stx            fallCounter2

          ldx            #0        
          stx            statusJP2
          

@exit                             
          rts
; ------------- end of main animatePlayer2 ---------------------------                
</code></pre>
Para muestra, aqui tengo un videos, observen que cuando recibe un tiro sale disparado hacia atras, a diferencia de antes, que se corria 3 mugrosos pixeles. Mi idea ademas es hacer una pequeña animacion con una explosion, que lo voy a dejar para el proximo post.

[youtube https://www.youtube.com/watch?v=j8aOiSzH78o&amp;w=560&amp;h=315]

Como siempre, el codigo completo lo pueden bajar desde el repositorio:
<a href="https://github.com/moonorongo/jp_wars.git">https://github.com/moonorongo/jp_wars.git</a>
Hasta la proxima!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>98</wp:post_id>
  <wp:post_date>2017-04-06 20:45:33</wp:post_date>
  <wp:post_date_gmt>2017-04-06 20:45:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>maquinas-de-estados</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="c64-assembler"><![CDATA[C64 assembler]]></category>
  <category domain="category" nicename="tutoriales"><![CDATA[Tutoriales]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3714422796]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Curso ASM - C64 game</title>
  <link>https://mscifu.wordpress.com/?page_id=104</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>mscifu</dc:creator>
  <guid isPermaLink="false">https://mscifu.wordpress.com/?page_id=104</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>104</wp:post_id>
  <wp:post_date>2017-04-06 20:58:51</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2417135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
